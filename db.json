{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/corazon/source/css/styles.styl","path":"css/styles.styl","modified":0,"renderable":1},{"_id":"themes/corazon/source/js/common.js","path":"js/common.js","modified":0,"renderable":1},{"_id":"themes/corazon/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/corazon/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/corazon/source/images/xxxx.jpg","path":"images/xxxx.jpg","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/jquery.js","path":"lib/jquery.js","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/css/bootstrap.min.css","path":"lib/bootstrap/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.eot","path":"lib/bootstrap/fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.svg","path":"lib/bootstrap/fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.ttf","path":"lib/bootstrap/fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.woff","path":"lib/bootstrap/fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.woff2","path":"lib/bootstrap/fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/bootstrap/js/bootstrap.js","path":"lib/bootstrap/js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1599671266764},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1599671316665},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1599671316665},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1599671316666},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1599671316666},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1599671316666},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1599671316677},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1599671316666},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1599671316667},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1599671316667},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1599671316667},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1599671316668},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1599671316668},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1599671316668},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1599671316668},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1599671316668},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1599671316668},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1599671316669},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1599671316669},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1599671316676},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1599671316676},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1599671316676},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1599671316676},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1599671316676},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1599671316677},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1599671316677},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1599671316677},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1599671316670},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1599671316670},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1599671316670},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1599671316671},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1599671316671},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1599671316671},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1599671316672},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1599671316672},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1599671316672},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1599671316672},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1599671316674},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1599671316674},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1599671316675},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1599671316675},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1599671316675},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1599671316676},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1599671316678},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1599671316683},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1599671316693},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1599671316693},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1599671316694},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1599671316694},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1599671316694},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1599671316694},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1599671316695},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1599671316697},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1599671316698},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1599671316699},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1599671316699},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1599671316673},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1599671316673},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1599671316673},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1599671316673},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1599671316674},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1599671316674},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1599671316678},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1599671316678},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1599671316679},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1599671316679},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1599671316678},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1599671316680},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1599671316681},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1599671316680},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1599671316682},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1599671316682},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1599671316683},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1599671316683},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1599671316684},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1599671316685},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1599671316689},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1599671316695},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1599671316695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1599671316695},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1599671316696},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1599671316697},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1599671316697},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1599671316689},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1599671316688},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1599671316692},{"_id":"themes/corazon/README.md","hash":"bb88d151876bdef25ef205a9f24409ffa12dd05e","modified":1599635102000},{"_id":"themes/corazon/_config.yml","hash":"6e8fb7cce9a9e1d76b3a45f3c27d268430d955c5","modified":1599725738365},{"_id":"themes/corazon/package-lock.json","hash":"072dce988cd9d7051d55c490c4c6dcd34a0ed16a","modified":1599635102000},{"_id":"themes/corazon/package.json","hash":"a789b907fa6147a4ec0422d94422db6214253dc5","modified":1599635102000},{"_id":"themes/corazon/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1599635102000},{"_id":"themes/corazon/languages/default.yml","hash":"7a7ffa0d3bc8d3714e05072f389988770f268826","modified":1599635102000},{"_id":"themes/corazon/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1599635102000},{"_id":"themes/corazon/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1599635102000},{"_id":"themes/corazon/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1599635102000},{"_id":"themes/corazon/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1599635102000},{"_id":"themes/corazon/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1599635102000},{"_id":"themes/corazon/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1599635102000},{"_id":"themes/corazon/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1599635102000},{"_id":"themes/corazon/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1599635102000},{"_id":"themes/corazon/languages/zh-CN.yml","hash":"060883d5471ff54f453a0f9d1d2dec832a75dd20","modified":1599635102000},{"_id":"themes/corazon/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1599635102000},{"_id":"themes/corazon/layout/about.ejs","hash":"a9106fbcf4d01d00444aed12e04669e532cc4faa","modified":1599635102000},{"_id":"themes/corazon/layout/archive.ejs","hash":"764a53de371d5daa9520326b36afda85e70f87aa","modified":1599635102000},{"_id":"themes/corazon/layout/index.ejs","hash":"998308beacfdeabe780fad649a2d23b4852cbcaf","modified":1599635102000},{"_id":"themes/corazon/layout/layout.ejs","hash":"ad87f184f3f342cee92400fffcd3d0b0f573cdda","modified":1599635102000},{"_id":"themes/corazon/layout/page.ejs","hash":"a334b9c58e0283650be3d46b3c5419203020e62a","modified":1599635102000},{"_id":"themes/corazon/layout/post.ejs","hash":"4d74635328bdb11c1fe59f7e2d2d84aca1e3a413","modified":1599635102000},{"_id":"themes/corazon/layout/tags.ejs","hash":"40bb740d4691b0d7a8ffe4d4b2309f81048df79a","modified":1599635102000},{"_id":"themes/corazon/layout/_common/article.ejs","hash":"0678ea14821dc1bfe6fdc5b9808c74f64b22b13d","modified":1599635102000},{"_id":"themes/corazon/layout/_common/banner.ejs","hash":"a6d6f7dfc5967176f1629497fdf40dcc81805181","modified":1599635102000},{"_id":"themes/corazon/layout/_common/footer.ejs","hash":"638f0ce9038808fd73ec3689b13dcf9cfc89fc30","modified":1599635102000},{"_id":"themes/corazon/layout/_common/head.ejs","hash":"c05afc60f96530481a181cc50fb2b00a7dc36d26","modified":1599635102000},{"_id":"themes/corazon/layout/_common/header.ejs","hash":"5b100e5dc1e7a61bbb66e8aa3bc8451d8b7faad5","modified":1599635102000},{"_id":"themes/corazon/layout/_common/paginator.ejs","hash":"2b6889f19bd6629e9ca684825d73ffde8405777e","modified":1599635102000},{"_id":"themes/corazon/source/css/styles.styl","hash":"36cc5c1ae9667200a39e0194471eef1d47c96c33","modified":1599635102000},{"_id":"themes/corazon/source/js/common.js","hash":"348e33d4fdf55196e28e23078835d6567841b392","modified":1599635102000},{"_id":"themes/corazon/source/images/favicon.ico","hash":"2e91cf1d489ca1c0f5bb7a7425502e749b8a4c62","modified":1599635102000},{"_id":"themes/corazon/source/images/logo.png","hash":"e305f3527879eb9319bf224ae832f9272fda5af9","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/about.styl","hash":"f6ecc082c619fbff351b20b364d0f613771eb7fa","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/archive.styl","hash":"440a614f49e754bfa157410b0c481e760d7061a3","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/footer.styl","hash":"375ef29f1a5e198b98586a6a8eb71ce139e29fea","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/header.styl","hash":"2c8ea01cf555691dd9037729be315ca9d29994fe","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/highlight.styl","hash":"583f8ae5fadd77a3b205b10636cb48b13e8c70a0","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/paginator.styl","hash":"e7eb915f7394c542f43b7fcea289abec3b7f1fca","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/main.styl","hash":"3ef97bbad2a1ab34b609f6cede4257896d0938bc","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/post.styl","hash":"3285a82a47652d71dc10d7998672342c6154129f","modified":1599635102000},{"_id":"themes/corazon/source/css/_common/tags.styl","hash":"97f73847552e67447a8ad472ff03f57b1f8c13d7","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/js/bootstrap.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1599635102000},{"_id":"themes/corazon/source/lib/jquery.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1599635102000},{"_id":"themes/corazon/source/lib/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1599635102000},{"_id":"themes/corazon/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1599635102000},{"_id":"themes/corazon/source/images/xxxx.jpg","hash":"b87a859f93b4eaf149bf7bd34d758223517a2b2c","modified":1599635102000},{"_id":"public/2020/09/10/hello-world/index.html","hash":"681b45134f21547a87431d9587a0a5284c114bea","modified":1599671815636},{"_id":"public/archives/index.html","hash":"0a89d70a5e236ea8b03e02bf6a21f269d941de0f","modified":1599671815636},{"_id":"public/archives/2020/index.html","hash":"0a89d70a5e236ea8b03e02bf6a21f269d941de0f","modified":1599671815636},{"_id":"public/archives/2020/09/index.html","hash":"0a89d70a5e236ea8b03e02bf6a21f269d941de0f","modified":1599671815636},{"_id":"public/index.html","hash":"61c99722c5be07b9015008ee97717ea6859dd41a","modified":1599671815636},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1599671815636},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1599671815636},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1599671815636},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1599671815636},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1599671815636},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1599671815636},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1599671815636},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1599671815636},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1599671815636},{"_id":"public/images/favicon.ico","hash":"2e91cf1d489ca1c0f5bb7a7425502e749b8a4c62","modified":1599671815636},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1599671815636},{"_id":"public/images/logo.png","hash":"e305f3527879eb9319bf224ae832f9272fda5af9","modified":1599671815636},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1599671815636},{"_id":"public/lib/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1599671815636},{"_id":"public/lib/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1599671815636},{"_id":"public/lib/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1599671815636},{"_id":"public/lib/bootstrap/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1599671815636},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1599671815636},{"_id":"public/lib/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1599671815636},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1599671815636},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1599671815636},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1599671815636},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1599671815636},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1599671815636},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1599671815636},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1599671815636},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1599671815636},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1599671815636},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1599671815636},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1599671815636},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1599671815636},{"_id":"public/css/styles.css","hash":"397940315e1c18990b5f9c3244e88f11d084aefd","modified":1599671815636},{"_id":"public/js/common.js","hash":"348e33d4fdf55196e28e23078835d6567841b392","modified":1599671815636},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1599671815636},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1599671815636},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1599671815636},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1599671815636},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1599671815636},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1599671815636},{"_id":"public/lib/bootstrap/js/bootstrap.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1599671815636},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1599671815636},{"_id":"public/lib/jquery.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1599671815636},{"_id":"public/lib/bootstrap/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1599671815636},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1599671815636},{"_id":"public/images/xxxx.jpg","hash":"b87a859f93b4eaf149bf7bd34d758223517a2b2c","modified":1599671815636},{"_id":"source/_posts/JMM内存模型.md","hash":"337b36b9b172a28b4d869320e363b0d102bc7717","modified":1599898351424},{"_id":"source/.DS_Store","hash":"0d635c28c4a82bbadf34620198e5343bc57935ff","modified":1600937837108},{"_id":"source/_posts/.DS_Store","hash":"ccfbd8bfc18453483718787b73c7ed8cadcf01a7","modified":1600039129422},{"_id":"source/_posts/blog1.md","hash":"5b46631140a086c98530c6ebae0ba89a7c306502","modified":1599710342556},{"_id":"themes/hexo-theme-clean-dark/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/share.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/recent_comments.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/_config.yml","hash":"320dbce907c380da061e016b9cd70844fd3fac15","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/package.json","hash":"958497d4fb6fafe4934b68f8a875228d0ddc4d2e","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/languages/zh-CN.yml","hash":"e1ba83a5b6cb2ab78819b5c7c1f1355f8aa91a77","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/languages/zh-TW.yml","hash":"f740aaa8c275abcf07a197a7f3085599f620681e","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/languages/es-ES.yml","hash":"f9823656b3a326902619109fdf36018ca37843a8","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/languages/en.yml","hash":"357cbf82a4b929e3cbe8aba48436b5aef3cb28b4","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/README.md","hash":"87a8036adb3f1b98f8263e66cabdc8bf6cb0546d","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/about.ejs","hash":"2eb22b16182f38b70d8d15dda4af81696ee9bc63","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/layout.ejs","hash":"af5091d3cabbdbbf7a94723cc7625481ffb57122","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/archive.ejs","hash":"356da124f63014cccaa577f8f4522129952e5b5d","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/post.ejs","hash":"ff902f486a515b8ca9c623aee897b2488a65948d","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/index.ejs","hash":"ebfec4c664083453929515a870928dfae9f79b81","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/after_footer.ejs","hash":"9b50bacd24b4775983623f75759cd734cca86b62","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/comments.ejs","hash":"4d3939b3c154f020ab9fcc66f7c49c6323120b9e","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/.DS_Store","hash":"7c71f0df3dbeacfb696958012e2cf8b257810c3b","modified":1599672360080},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/header.ejs","hash":"a449448aa0f961ce40cb5008ffad6a7f5b06ba54","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/seo.ejs","hash":"050bf26590701535537a1a8e1bd65c686a5258f1","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/pagination.ejs","hash":"be0fabec3f0a549d8544eeff55df3a177607e9ba","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/sidebar.ejs","hash":"75224c8d27e0ef5b175e85cdba0c907a7578a323","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/footer.ejs","hash":"5525597b9701bc6431341abddc0d0e44357138ea","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/social.ejs","hash":"61984dc7709b86d2574a8b9975a285776152b1a0","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/tag.ejs","hash":"ddd1c09af9b4330547b9cf7395ee4b3abd3c295f","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_partial/toc.ejs","hash":"bf4937b75caca265022610d24a291fdffefe9a99","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/links.ejs","hash":"950653041e7a8abd83f358107958b6c8cd4b4976","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/recent_posts.ejs","hash":"f2ed0c7283181701e6baa692cc49df2246efe220","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/categories.ejs","hash":"3922a32815d9a7fa540999bddc761cb9558c7e47","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/archives.ejs","hash":"970f05e0181da12174df45d9f35cdd131e31dbc6","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/tagcloud.ejs","hash":"f85342d6b3f4d884070bfa8a504678c17cc7e56c","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/syntax.scss","hash":"ce185ff395ad9a9f4bacf0dae44dac59109f8d6e","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/layout/_widget/tags.ejs","hash":"4274035292d5b65a3d83c621ed61ea40ae2956f6","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/js/header.js","hash":"a0852e26e7d07627aed4796c7d26bb416e0e3426","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/js/toc.js","hash":"7463f37db48bf86d1a233db313841e1288514430","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/icomoon/icomoon.eot","hash":"09d737377e3919aa077b03fad1a28453122441e5","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/theme.scss","hash":"2b0765521f76799d44db380ab4429f9ebea2cf5c","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/icomoon/icomoon.svg.1","hash":"9dd807f6877ef1e0e26e0dfdc4d3634c41f2e11e","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/icomoon/icomoon.svg","hash":"7ae9db237abc66ea2274f74094eb8c7c99f37f50","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/icomoon/icomoon.ttf","hash":"60cca846b8d2a575c80b90ae11f592d2d99e96d7","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/icomoon/icomoon.woff","hash":"6591aaef4dde867b527e287ec0248566ba57876e","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/pics/random-grey-variations.png","hash":"d8c11bf97e41c8b1ef03c3d4eff69008b2216303","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/icomoon/style.css","hash":"c135e36a25b1f7cbbef77752282c90042c2c9925","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/pics/triangles.png","hash":"845b28085613ff5c3c0f367b6bb6567ec51c4aaa","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/js/webfont/webfont.js","hash":"9c030800712c832f2a15040cf02f546884a99808","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/core.less","hash":"1a37352286619b789d151a06eb4b7551e4c1aaa2","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/fixed-width.less","hash":"ec0c24b97184dab86177660f486b8d08cd636c42","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/bordered-pulled.less","hash":"a2c292137b17406183ad0fdbf4880fd648b9a5ca","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/animated.less","hash":"421f2c4e10191f148c13b8a34e5ff3f484d4c393","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/larger.less","hash":"e7119e82dc50540dbc3472bba7d74282815a7ecc","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/font-awesome.less","hash":"c5455d2145b26f8bddafd275c136a820239d24f4","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/mixins.less","hash":"3a0717f78374197641fd7a9ff30dffe4c3207e10","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/icons.less","hash":"4f999d0ac4b42bbae65800345dd0022a956ec7ce","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/list.less","hash":"f53bc20884a1410d950b4a36a330c5181a8b55ab","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/path.less","hash":"47108f118b6a9643774b718dd4c56f4c81ce681b","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/rotated-flipped.less","hash":"95de5de9009714692430b04f9cd4388be8fba8f3","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/stacked.less","hash":"f044077bc8be1a989c245254e81eb084d52d29a7","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/less/variables.less","hash":"42785619f38d07e60337a83151bfcf1c2f27ccde","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_animated.scss","hash":"8daf189b2f8a404495b8424b6fd1ba630dd1c2dc","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_core.scss","hash":"55a14a34267edc401b82e5ee41d8bd84fbb5da3f","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_bordered-pulled.scss","hash":"164b6a0a2b307cd293f4a914ab0fcdf643950374","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_fixed-width.scss","hash":"224417ca266c657849afb2bbcb6dc455894ff387","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_list.scss","hash":"4b53ee01513df8b9ce76442b2d8f1851613a435c","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_mixins.scss","hash":"624682da7da2566b3c8d2d5fb268d8a73899b3ea","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_larger.scss","hash":"940e1c5ebc690283bfaee92560cf15fabedbf6a9","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_icons.scss","hash":"08e110163d600817c1b7f9cc62dff040fe4ce654","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_rotated-flipped.scss","hash":"ca08a0af3da63c2f2a7d3c27a8747637744cc785","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_path.scss","hash":"080158aeb1bf6df59ec98b2bbed44da61d9c9ca3","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_stacked.scss","hash":"cf6752ee609af36eb293a7197c88d31ecacbbc74","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/font-awesome.scss","hash":"4226e57d771b3a0c97e5a0359c42f9d7d44ec2ac","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/scss/_variables.scss","hash":"48a12edeca95e369bb5479eeafac78d2f6fc3221","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1599635102000},{"_id":"themes/hexo-theme-clean-dark/source/css/font-awesome/fonts/fontawesome-webfont.svg","hash":"76be72ff35f300e1be1cb5ed11abcc0922fa00d6","modified":1599635102000},{"_id":"themes/landscape/.DS_Store","hash":"42801684d3f4028c44aed7a0edbc89d0f82445f3","modified":1599672355065},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1599726869031},{"_id":"themes/hexo-theme-one/.gitattributes","hash":"4873ffd6a2dbefbc351150724a355d00e4237868","modified":1599726868929},{"_id":"themes/hexo-theme-one/.babelrc","hash":"cd9ff56975c343fdbc83fc022f993356190371ca","modified":1599726868929},{"_id":"themes/hexo-theme-one/.DS_Store","hash":"7af979ac9fb68c042b24b34ab7a26f6a66f8b6b1","modified":1599727722206},{"_id":"themes/hexo-theme-one/gulpfile.js","hash":"be870bb26fc924756affdb1e83e8d23822f9572f","modified":1599726869029},{"_id":"themes/hexo-theme-one/LICENSE","hash":"3127907a7623734f830e8c69ccee03b693bf993e","modified":1599726868930},{"_id":"themes/hexo-theme-one/README.md","hash":"3965e2651af021b10cf9a50e3a6c0d16c1e86098","modified":1599726868930},{"_id":"themes/hexo-theme-one/postcss.config.js","hash":"fbb8fcf8da174788ab7f015e64c43ea103ca7dec","modified":1599726869133},{"_id":"themes/hexo-theme-one/webpack.config.js","hash":"bbfaa5a3b9555b5a4b7191acdefc1d6bad416f83","modified":1599726869153},{"_id":"themes/hexo-theme-one/webpack.config.prod.js","hash":"92abd02da422aebf3be9d21683487370339ab20a","modified":1599726869153},{"_id":"themes/hexo-theme-one/build.cson","hash":"637c8db25c8c2483d436e3db0c04a85874356ec5","modified":1599726868930},{"_id":"themes/hexo-theme-one/package.json","hash":"7a74d36a42bdfb2cee4c7de28af4e354a028edec","modified":1599726869133},{"_id":"themes/hexo-theme-one/tsconfig.json","hash":"fe67c50af73406372d93a3f6c354b0ad5c60616b","modified":1599726869153},{"_id":"themes/hexo-theme-one/dist/012cf6a10129e2275d79d6adac7f3b02.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1599726868931},{"_id":"themes/hexo-theme-one/dist/570eb83859dc23dd0eec423a49e147fe.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1599726868933},{"_id":"themes/hexo-theme-one/dist/index.html","hash":"add1acb9ba3df604955502ed6ff844356d94f54e","modified":1599726868988},{"_id":"themes/hexo-theme-one/docs/Page-Front-matter.md","hash":"d87c6359b95ffc4682f71755161e90ebac4229b8","modified":1599726869023},{"_id":"themes/hexo-theme-one/docs/Post-Front-matter.md","hash":"472fd1cb41487c07512f2a96fed779e86db16a3d","modified":1599726869023},{"_id":"themes/hexo-theme-one/docs/README.md","hash":"93c05379254dd284de588e2cdaa5154ba8b20ebf","modified":1599726869023},{"_id":"themes/hexo-theme-one/docs/expert.md","hash":"623404d50861f5e64866e97d91d539da081387d5","modified":1599726869023},{"_id":"themes/hexo-theme-one/docs/color.md","hash":"eb9950aac21ebf3edaec366591b9a32bdebfb26f","modified":1599726869023},{"_id":"themes/hexo-theme-one/docs/features.md","hash":"6ea6f1f20a72bca488e4528fded81887cdcdaea4","modified":1599726869023},{"_id":"themes/hexo-theme-one/docs/setting.md","hash":"6c27695ae74630fb65da7531f885236cf5615b72","modified":1599726869029},{"_id":"themes/hexo-theme-one/docs/setup.md","hash":"89c586ae8ae3c74766e1ce0759712b0f5cb2e852","modified":1599726869029},{"_id":"themes/hexo-theme-one/src/.DS_Store","hash":"5f466017cf7e82137c1d82a632f09b1d74e191e6","modified":1599726869133},{"_id":"themes/hexo-theme-one/hexo/_config.yml.example","hash":"293537e902308415e7c64cc5da41e3682dcbf947","modified":1599726869030},{"_id":"themes/hexo-theme-one/src/index.d.ts","hash":"6384ba720c37a329a84cfffe4164b50e1170d70a","modified":1599726869147},{"_id":"themes/hexo-theme-one/mochawesome-reports/mochawesome.json","hash":"83a4f5b81fc7d4b4c3b950dd0b23e28978dcb07d","modified":1599726869132},{"_id":"themes/hexo-theme-one/src/create-store.ts","hash":"dd1506f79aa632f26f628508aad779287fdc2b0d","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/index.html","hash":"d53d0a444fc418009e8525b03d979588eea5ffc1","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/main.less","hash":"ffa4777af9496d3af0c7b35b9c447918cdb01e8b","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/main.tsx","hash":"d16c068d948f5c7013406a3fb4a788cc1d13852d","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/stateI.ts","hash":"2327ce6d81d1bd002e55f8bff03543ad9bb96ed8","modified":1599726869152},{"_id":"themes/hexo-theme-one/src/variable.less","hash":"1aec3b4920cda7bfc9d97cb15ffec35ea6e54b2e","modified":1599726869152},{"_id":"themes/hexo-theme-one/src/windowSize.ts","hash":"177143008fe35b64776f9a588aac14296500515d","modified":1599726869152},{"_id":"themes/hexo-theme-one/test/mocha.opts","hash":"b4f84d2b49d1a75936fb7c310f00a078e9991041","modified":1599726869153},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1599726869120},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1599726869120},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/app.css","hash":"bb6cdb1f0a4b7ff1ed29e496659fbe188048336c","modified":1599726869121},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/roboto-light-webfont.woff","hash":"861a9e7b71b5c15a264ef2e710ad961cd7a62f2c","modified":1599726869129},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/roboto-light-webfont.woff2","hash":"850db42a36c04c76840ff7d11b724b4a4ff52e3f","modified":1599726869130},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/roboto-medium-webfont.woff","hash":"783554abe98c2bf1e5179a4d9af24c204f679308","modified":1599726869130},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/roboto-medium-webfont.woff2","hash":"fea0207dd1d13e73f069f526874d179c34fe893f","modified":1599726869131},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/roboto-regular-webfont.woff","hash":"ec5710c7e9d89f96639b0dc6ac2e680245131291","modified":1599726869131},{"_id":"themes/hexo-theme-one/hexo/layout/index.ejs","hash":"dba8f063f5f0013f1f3680663c2c4090fa02072a","modified":1599726869030},{"_id":"themes/hexo-theme-one/hexo/layout/layout.ejs","hash":"dba8f063f5f0013f1f3680663c2c4090fa02072a","modified":1599726869030},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/roboto-regular-webfont.woff2","hash":"ebda7a8e6e9207d74112b0c95b9422ce8795a7d7","modified":1599726869131},{"_id":"themes/hexo-theme-one/hexo/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1599726869030},{"_id":"themes/hexo-theme-one/hexo/scripts/index.js","hash":"c63ab8162634ede968455fa51c68b2b6ef6cd55e","modified":1599726869030},{"_id":"themes/hexo-theme-one/hexo/source/012cf6a10129e2275d79d6adac7f3b02.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1599726869032},{"_id":"themes/hexo-theme-one/hexo/source/570eb83859dc23dd0eec423a49e147fe.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1599726869043},{"_id":"themes/hexo-theme-one/hexo/source/index.html","hash":"add1acb9ba3df604955502ed6ff844356d94f54e","modified":1599726869104},{"_id":"themes/hexo-theme-one/src/Interfaces/categories.ts","hash":"95d42d922ad24c3d40c947625016e68258ebc477","modified":1599726869133},{"_id":"themes/hexo-theme-one/src/Interfaces/category.ts","hash":"d281a599f8ad0c6b2e581d8564f75e1cf5b32c0f","modified":1599726869134},{"_id":"themes/hexo-theme-one/src/Interfaces/page.ts","hash":"8154eb1fd7390690f35686e2c4f2312a7962427d","modified":1599726869134},{"_id":"themes/hexo-theme-one/src/Interfaces/post.ts","hash":"ebb25b3e7305e65044a303923d6c207e53330562","modified":1599726869134},{"_id":"themes/hexo-theme-one/src/Interfaces/posts.ts","hash":"762248bca9096d914f87d2a87e7c749d636d72ac","modified":1599726869134},{"_id":"themes/hexo-theme-one/src/Interfaces/site.ts","hash":"8030d4d4a42714ac2fb4215aeaeb9e389be2794a","modified":1599726869134},{"_id":"themes/hexo-theme-one/src/Interfaces/tag.ts","hash":"90338147069944b8208349b133c296649108c21f","modified":1599726869135},{"_id":"themes/hexo-theme-one/src/Interfaces/tags.ts","hash":"82c1c9ec5d4fcc9e40b5487bf62f16ed165ca675","modified":1599726869135},{"_id":"themes/hexo-theme-one/src/Interfaces/theme.ts","hash":"b328d8da4206cead062aef94722ebdb2cd0dca2b","modified":1599726869135},{"_id":"themes/hexo-theme-one/src/actions/background.ts","hash":"a450bfe2b1bb414483e5c6c491262b3dd3d53dee","modified":1599726869135},{"_id":"themes/hexo-theme-one/src/actions/categories.ts","hash":"cb65fafc385a826185f9629cdc7aa6ab61dbd64a","modified":1599726869136},{"_id":"themes/hexo-theme-one/src/actions/post.ts","hash":"47eed244b54ca6fac6a75489141d5ca4cc1fd884","modified":1599726869136},{"_id":"themes/hexo-theme-one/src/actions/page.ts","hash":"f454de3da5aa9ce097f6bb56f84c6af47d68d3f8","modified":1599726869136},{"_id":"themes/hexo-theme-one/src/actions/nav.ts","hash":"0e6518187a50ac02bf775ce47891223847cd2781","modified":1599726869136},{"_id":"themes/hexo-theme-one/src/actions/posts.ts","hash":"17bd667b46b7e40dfc489b7017f74ae8deca6ed7","modified":1599726869136},{"_id":"themes/hexo-theme-one/src/actions/tags.ts","hash":"59f9df043e43b1a485e9bc53dcbb0cc125b1bd70","modified":1599726869137},{"_id":"themes/hexo-theme-one/src/actions/windowSize.ts","hash":"5b97bc5a1ab70ea454da58ee51b9b781e76cde43","modified":1599726869137},{"_id":"themes/hexo-theme-one/src/actions/theme.ts","hash":"b1380e9b924c188de1b5aaf7cfaf00811fbb10e5","modified":1599726869137},{"_id":"themes/hexo-theme-one/src/lib/color2Theme.ts","hash":"ba8907d52d16a03a4c753147157ef2b96942fd94","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/components/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1599726869137},{"_id":"themes/hexo-theme-one/src/lib/History.ts","hash":"7895ec3fc9be155476a29644edda7b70f1e7ca5f","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/lib/api.ts","hash":"3752156733be8bf314e5e1a97f4e049932a3d298","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/lib/random.ts","hash":"392cb6a6447d28066ae131c5dabde183af349f92","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/lib/hexoApi.ts","hash":"80f99051f90508e717d8b337ab00c256bda67cfe","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/lib/themes.ts","hash":"08bb95e1a939af2e03a2b1c5b20b61fe542a635c","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/lib/sreenSize.ts","hash":"49e070261eed4287f6bfe259cb3f0e3be8d795ad","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/lib/translate.ts","hash":"b25ed39df81fb509c1e976277722d07b38dbea27","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/locale/en_US.ts","hash":"bf8660cc13cf22e2643ce3452a31235691d8d33e","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/middlewares/promise-middleware.ts","hash":"30d1c8381f1f5521ff9be0212f0f00a0999b2c36","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/locale/zh_CN.ts","hash":"75af834b319a4799472784fd73b159ba4038b28f","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/reducers/background.ts","hash":"3619551b75d043606853ae1437e3cff6b127eb75","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/reducers/categories.ts","hash":"f130800f9befdd9fa76ae134fbe2d31dbd855f0e","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/reducers/category.ts","hash":"8db2e7816fd2902b84334b97d9a420a403caa42f","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/reducers/nav.ts","hash":"01bcc7ba0a420503c7f10bbbdc09e39dd49acced","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/reducers/page.ts","hash":"342a779fb8e96a824614688df07f53cf491f8243","modified":1599726869150},{"_id":"themes/hexo-theme-one/src/reducers/post.ts","hash":"e2d133d55ddb12fa92b1156f994effddc89c86db","modified":1599726869151},{"_id":"themes/hexo-theme-one/src/reducers/posts.ts","hash":"0c5ec51706312c1860e3cd26e12ae0b26189d782","modified":1599726869151},{"_id":"themes/hexo-theme-one/src/reducers/reducer.ts","hash":"6bfb568328a70f6b1ec988126b8cba443db6c3b4","modified":1599726869151},{"_id":"themes/hexo-theme-one/src/reducers/site.ts","hash":"c2113eb91b74a2e69554d73aadc833b786869687","modified":1599726869151},{"_id":"themes/hexo-theme-one/src/reducers/tag.ts","hash":"e6b0b1019bb2409a735ee27248fda1a9b177ec68","modified":1599726869151},{"_id":"themes/hexo-theme-one/src/reducers/tags.ts","hash":"e53600debcfc5c91dea06958f58903e87d43049d","modified":1599726869152},{"_id":"themes/hexo-theme-one/src/reducers/theme.ts","hash":"8ba4ee06f9e6725812f0bb42337ce34eda65c43d","modified":1599726869152},{"_id":"themes/hexo-theme-one/src/reducers/windowSize.ts","hash":"1b02a2eaa473154b6f77ac9736fab2dad4610bc4","modified":1599726869152},{"_id":"themes/hexo-theme-one/test/actions/posts.test.ts","hash":"f66a2dca93ed17c7a7a7854ddb6cdb0c56dfaf97","modified":1599726869152},{"_id":"themes/hexo-theme-one/test/actions/theme.test.ts","hash":"1d35fb5b6578f1ad6e9337a58b7441aa96f09d57","modified":1599726869153},{"_id":"themes/hexo-theme-one/test/lib/random.test.ts","hash":"ca5c94f4ffa19fd8428e795e711857ba0fefc990","modified":1599726869153},{"_id":"themes/hexo-theme-one/test/reducers/posts.test.ts","hash":"6bffacd3d2404a496d85b6371e9019b7607f40f7","modified":1599726869153},{"_id":"themes/hexo-theme-one/test/reducers/site.test.ts","hash":"e1132e07ae4a13af9829082fb259a54fd133a50c","modified":1599726869153},{"_id":"themes/hexo-theme-one/test/reducers/theme.test.ts","hash":"ef47ab902aaa83c2b51e563bc3bdb8bf170c70cc","modified":1599726869153},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/css_lsload.js","hash":"b5e624154c0a36914454eb129549d92fe22a6201","modified":1599726869031},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1599726869031},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1599726869031},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/js_lsload.js","hash":"a8778ec9b545968308959b8e81ec16dbf0b21908","modified":1599726869031},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1599726869031},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/router-add-one.js","hash":"afa1cc03ea12c1453c6fa4132e163e6cfd030821","modified":1599726869032},{"_id":"themes/hexo-theme-one/hexo/scripts/lib/restful.js","hash":"bb02f074e56b4762c709b85959ad76d12888976d","modified":1599726869031},{"_id":"themes/hexo-theme-one/src/components/Drawer/Drawer.less","hash":"9f40264d8d2505224d4bcac787375581b172b390","modified":1599726869137},{"_id":"themes/hexo-theme-one/src/components/Drawer/Drawer.tsx","hash":"ca8083aef0730c6a2de0116c55128a7867447975","modified":1599726869138},{"_id":"themes/hexo-theme-one/src/components/Menu/Menu.less","hash":"7d08d862543e9115743629703f4cfdd4fe5ea678","modified":1599726869138},{"_id":"themes/hexo-theme-one/src/components/Menu/Menu.tsx","hash":"32deff01b19e34268e18469329b2637f09689a52","modified":1599726869138},{"_id":"themes/hexo-theme-one/src/components/Tab/Tab.less","hash":"f264266128003c6ba2a0bb5518e04d1ee3b26933","modified":1599726869138},{"_id":"themes/hexo-theme-one/src/components/Tab/Tab.tsx","hash":"c21a0c8416544fa92425d1097c8b84ee2739f77d","modified":1599726869138},{"_id":"themes/hexo-theme-one/src/components/WelcomeCard/WelcomeCard.less","hash":"6e06a9fc433b8cf6ebc514c690644e91f135a7a8","modified":1599726869139},{"_id":"themes/hexo-theme-one/src/components/WelcomeCard/WelcomeCard.tsx","hash":"e274efc275184f4c62d8c01e40ac32168c3ffe28","modified":1599726869139},{"_id":"themes/hexo-theme-one/src/components/background/background.less","hash":"377e8dfb76a7c4e3de115175b657a234a72069c4","modified":1599726869139},{"_id":"themes/hexo-theme-one/src/components/app/app.tsx","hash":"aaad9d2abccf0dc5e57f21c7eda3dd71a0ad350e","modified":1599726869139},{"_id":"themes/hexo-theme-one/src/components/background/background.tsx","hash":"839acfd101ee4fb8340b002338366527a2c4d9be","modified":1599726869140},{"_id":"themes/hexo-theme-one/src/components/app/app.less","hash":"5f2f3f1b0447caa7d3de4381516900c068e00599","modified":1599726869139},{"_id":"themes/hexo-theme-one/src/components/card/card.less","hash":"936595e56848820dd744d6a07faf2d8266f7c5ab","modified":1599726869140},{"_id":"themes/hexo-theme-one/src/components/cardHeaderAvatar/cardHeaderAvatar.tsx","hash":"83b9979a3c9ec6e6c8d686777068636efb6765a1","modified":1599726869140},{"_id":"themes/hexo-theme-one/src/components/category/category.less","hash":"0ddc7eeb038ffdd89d3f577f24a8fd11da2660ed","modified":1599726869140},{"_id":"themes/hexo-theme-one/src/components/cardHeaderAvatar/cardHeaderAvatar.less","hash":"b147e10ff7e7acfeaf9fb3611992107f7d5833e0","modified":1599726869140},{"_id":"themes/hexo-theme-one/src/components/colorChoose/colorChoose.less","hash":"84fa26c6015128e4f074f7db778ee71fe0f79d1f","modified":1599726869141},{"_id":"themes/hexo-theme-one/src/components/colorChoose/colorChoose.tsx","hash":"12cb2f6c755f824f51c7b93fa5934405d5b12cc5","modified":1599726869141},{"_id":"themes/hexo-theme-one/src/components/category/category.tsx","hash":"c042a0771bdfe4c7ece7cb115c98123411c1b360","modified":1599726869140},{"_id":"themes/hexo-theme-one/src/components/colorChooseButton/colorChooseButton.less","hash":"3900600caca0f18d1fa5a4ee3a984657873d9290","modified":1599726869141},{"_id":"themes/hexo-theme-one/src/components/comment/comment.tsx","hash":"ed1d8933ab656a059437a3c2527ee8e360682367","modified":1599726869141},{"_id":"themes/hexo-theme-one/src/components/colorChooseButton/colorChooseButton.tsx","hash":"358ca6218281a489578b6a0acef9b457afcc6d4d","modified":1599726869141},{"_id":"themes/hexo-theme-one/src/components/context/context.tsx","hash":"9dc7b9001090baaa11d4efd1393abad9cfb1aeac","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/context/context.less","hash":"ae106acfaa053bb080590ece8345bb8006f9deab","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/fixedAt/fixedAt.less","hash":"d3e0d9331f32c2b72363a667efaac38887d0ce1a","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/displayTrigger/displayTrigger.tsx","hash":"bc5221968303dd32da3dbf1cdf0a1e6224c926ae","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/fixedAt/fixedAt.tsx","hash":"7184cee3ddd128787c0f03a1e5a2343b8ca4639c","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/footer/footer.less","hash":"813b290fdc03e7ae11b7bf4d25c90804c2f97600","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/grid/grid.less","hash":"9094c7bf3e3e11e3470f8afe3b15ad92bdcf6cdd","modified":1599726869143},{"_id":"themes/hexo-theme-one/src/components/footer/footer.tsx","hash":"3a316095de05b68346ab479437be73944b17bdb2","modified":1599726869142},{"_id":"themes/hexo-theme-one/src/components/grid/grid.tsx","hash":"acd0ddabe4a0459ec2cea648c05401c4b64b4b9d","modified":1599726869143},{"_id":"themes/hexo-theme-one/src/components/header/header.tsx","hash":"97af67332ac8014039c0a97a2fcbf48b9fba6bb9","modified":1599726869143},{"_id":"themes/hexo-theme-one/src/components/home/home.tsx","hash":"a3658c7e6d332dc3e7f344088b62d0af65831f5b","modified":1599726869144},{"_id":"themes/hexo-theme-one/src/components/logoCard/logoCard.less","hash":"779a768f6fe683dd773d180800ffbdf8da923074","modified":1599726869144},{"_id":"themes/hexo-theme-one/src/components/home/home.less","hash":"f3affc39b5293d77684f44022a24df8eb13c83e0","modified":1599726869143},{"_id":"themes/hexo-theme-one/src/components/logoCard/logoCard.tsx","hash":"dd8a8db52d7323817d8fb9d4e6dcf9e5da92966b","modified":1599726869144},{"_id":"themes/hexo-theme-one/src/components/page/page.less","hash":"98bea17ea8aa8421227875af18d520cc7c08b922","modified":1599726869144},{"_id":"themes/hexo-theme-one/src/components/post/post.less","hash":"45d228ca834eb24944ccb82fc791e00ef774220a","modified":1599726869145},{"_id":"themes/hexo-theme-one/src/components/page/page.tsx","hash":"bdfaab93d24f1b0cafb072efd0d879dbdb2e7572","modified":1599726869145},{"_id":"themes/hexo-theme-one/src/components/post/post.tsx","hash":"edc022dbd6adebdb26a1a87954b4f85c76bdfced","modified":1599726869145},{"_id":"themes/hexo-theme-one/src/components/postCard/postCard.less","hash":"c9e361cd88a789c09ac84e696915d62a2d88aecd","modified":1599726869146},{"_id":"themes/hexo-theme-one/src/components/sideHander/sideHander.less","hash":"8ba84e94041096beaf2356ea1587ecc1052228e6","modified":1599726869146},{"_id":"themes/hexo-theme-one/src/components/postCard/postCard.tsx","hash":"81328b5631e889e2d96a46526a33c40cf129f099","modified":1599726869146},{"_id":"themes/hexo-theme-one/src/components/search/search.less","hash":"c67665088a867e3bf52a581b299908ef6b393448","modified":1599726869146},{"_id":"themes/hexo-theme-one/src/components/search/search.tsx","hash":"cc99c6c9010e9387c33db1b78cb082beeb9c9e89","modified":1599726869146},{"_id":"themes/hexo-theme-one/src/components/sideHander/sideHander.tsx","hash":"307529a1f16fc8e6d87fbfb4a44a0d99c1efe5e7","modified":1599726869146},{"_id":"themes/hexo-theme-one/src/components/tag/tag.less","hash":"04459dcf9a1d154a01edaa763339c31335d41982","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/components/tag/tag.tsx","hash":"6dd6bfe993360420dddb818caedbb7df7041cfe7","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/components/toc/toc.less","hash":"202df1f8405d5d5386c5e2f8c765023e60a678aa","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/components/toc/toc.tsx","hash":"d3da50cc0d96450117dd752df16881ae6cc12562","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/components/tocList/tocList.less","hash":"e77cf9c35c3c9f9885a8883e8b2f426802eac814","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/components/tocList/tocList.tsx","hash":"7728f646a21f42bc322561acb279466151feebdb","modified":1599726869147},{"_id":"themes/hexo-theme-one/src/lib/seedrandom/seedrandom.d.ts","hash":"3a7267ef474d335ab344130d7b7cdbe66940ba93","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/lib/react-disqus-thread/DisqusThread.jsx","hash":"d7f2e09a1f299b87c8217fc7ddebec0d0018ed6f","modified":1599726869148},{"_id":"themes/hexo-theme-one/src/lib/seedrandom/seedrandom.js","hash":"6720ea2932705412cde9c24235437c41e396e216","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/lib/webkit-scrollrail/style.less","hash":"fc3bc2769f9bbf66c5f538c5adc57d202fcba131","modified":1599726869149},{"_id":"themes/hexo-theme-one/src/lib/webkit-scrollrail/webkit-scrollrail.js","hash":"b97c09c98540af86cc8cb98188ef2257ae5e99ec","modified":1599726869149},{"_id":"themes/hexo-theme-one/dist/a37b0c01c0baf1888ca812cc0508f6e2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1599726868934},{"_id":"themes/hexo-theme-one/mochawesome-reports/mochawesome.html","hash":"f3d78d41a2671b5f4326569b4b3d443ffe7aa9ee","modified":1599726869132},{"_id":"themes/hexo-theme-one/hexo/source/a37b0c01c0baf1888ca812cc0508f6e2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1599726869044},{"_id":"themes/hexo-theme-one/dist/52342c4f7685bd4be2f462665845d4e9.js","hash":"ceac2f8363baa1ddb8853d3bcd3c3f3c6d12326a","modified":1599726868932},{"_id":"themes/hexo-theme-one/dist/e79bfd88537def476913f3ed52f4f4b3.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1599726868987},{"_id":"themes/hexo-theme-one/dist/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1599726868988},{"_id":"themes/hexo-theme-one/hexo/source/52342c4f7685bd4be2f462665845d4e9.js","hash":"ceac2f8363baa1ddb8853d3bcd3c3f3c6d12326a","modified":1599726869033},{"_id":"themes/hexo-theme-one/hexo/source/e79bfd88537def476913f3ed52f4f4b3.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1599726869103},{"_id":"themes/hexo-theme-one/hexo/source/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1599726869103},{"_id":"themes/hexo-theme-one/dist/vendor.js","hash":"e0b464cc7951b731a635e80553b0e1829d305c2e","modified":1599726868991},{"_id":"themes/hexo-theme-one/hexo/source/bundle.js","hash":"6aa0aa2a54c3ad025ee8a0dbbfd0528358537bdb","modified":1599726869045},{"_id":"themes/hexo-theme-one/hexo/source/vendor.js","hash":"e0b464cc7951b731a635e80553b0e1829d305c2e","modified":1599726869105},{"_id":"themes/hexo-theme-one/docs/screenshot.png","hash":"ae5cb331dfba53841b234f0e7fc91596419bfafc","modified":1599726869029},{"_id":"themes/hexo-theme-one/dist/bundle.js","hash":"6aa0aa2a54c3ad025ee8a0dbbfd0528358537bdb","modified":1599726868938},{"_id":"themes/hexo-theme-one/mochawesome-reports/assets/app.js","hash":"274d8cc74c0d6f8db66b5078c303b477809c504a","modified":1599726869128},{"_id":"themes/hexo-theme-one/dist/bundle.js.map","hash":"433753b9b460ea8422b7f97eefc03d29fd0eb944","modified":1599726868984},{"_id":"themes/hexo-theme-one/hexo/source/bundle.js.map","hash":"433753b9b460ea8422b7f97eefc03d29fd0eb944","modified":1599726869101},{"_id":"themes/hexo-theme-one/dist/vendor.js.map","hash":"47795ec038673ca72dbd3dd312eefef68677807d","modified":1599726869019},{"_id":"themes/hexo-theme-one/hexo/source/vendor.js.map","hash":"47795ec038673ca72dbd3dd312eefef68677807d","modified":1599726869118},{"_id":"themes/hexo-theme-one/.gitignore","hash":"3ebf25058b12c9ea2d08dfe8bc6c29c9ca0bdb93","modified":1599727722207},{"_id":"themes/corazon/.DS_Store","hash":"bb5a3b8f736f0320fa7f10cba72c065e90df4e1c","modified":1599725961875},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1599795974292},{"_id":"themes/hexo-theme-next/.gitignore","hash":"10fa9758d8f934669c1781564ed9ce83436b11f7","modified":1599795974295},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1599795974292},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1599795974292},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1599795974295},{"_id":"themes/hexo-theme-next/.npmignore","hash":"b5753ace1856548855d1f2c31c05da85781629e6","modified":1599795974295},{"_id":"themes/hexo-theme-next/_vendors.yml","hash":"ac81898536eeda4384be0a18a621c5a8659cbc51","modified":1599795974296},{"_id":"themes/hexo-theme-next/README.md","hash":"f373cc6b97311ecfdcc1d2cb279faf6560de1cc6","modified":1599795974296},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":1599795974295},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1599795974296},{"_id":"themes/hexo-theme-next/package.json","hash":"f2802846088cbe369b5b6fabb50631ced94b61c0","modified":1599795974317},{"_id":"themes/hexo-theme-next/_config.yml","hash":"780d7c8bad0d8368beb638184612b668f87d5e31","modified":1599795974296},{"_id":"themes/hexo-theme-next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1599795974317},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"81dbb25800165f68c21859cd3c09276b9f4cc417","modified":1599795974292},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1599795974293},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1599795974293},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/labeler.yml","hash":"a45e489c62bf5bb5eb1866371af331b8cb9c6320","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"0e40b9975455152a690eaf7047135be348966e39","modified":1599795974294},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1599795974297},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1599795974296},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":1599795974297},{"_id":"themes/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1599795974298},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1599795974298},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1599795974298},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1599795974298},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1599795974298},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1599795974299},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1599795974300},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1599795974300},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1599795974300},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1599795974300},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1599795974300},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1599795974301},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1599795974301},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":1599795974301},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1599795974301},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":1599795974301},{"_id":"themes/hexo-theme-next/layout/archive.njk","hash":"08885f48d5878c92c910f8c41e3209eb07b9b80e","modified":1599795974316},{"_id":"themes/hexo-theme-next/layout/category.njk","hash":"434fc2b27120ebae91522002eb40e16f2158bd4f","modified":1599795974316},{"_id":"themes/hexo-theme-next/layout/_layout.njk","hash":"bf7e6ca826b6c3f85e14da61d56d7b836d2414c4","modified":1599795974302},{"_id":"themes/hexo-theme-next/layout/page.njk","hash":"4f8f377e4f5511e27de1c2e4a1c13374b6a5d9bd","modified":1599795974317},{"_id":"themes/hexo-theme-next/layout/index.njk","hash":"d8fa14549fa061e7bdba4ec1472cb45ecea96382","modified":1599795974316},{"_id":"themes/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1599795974317},{"_id":"themes/hexo-theme-next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":1599795974322},{"_id":"themes/hexo-theme-next/layout/tag.njk","hash":"09075c80b53b06826e7eb9ce838bca9dc363fac1","modified":1599795974317},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fb2046f2a865e649fe96cb27096d622e4275da1a","modified":1599795974293},{"_id":"themes/hexo-theme-next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1599795974349},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"0200bed29dad088a192ce8e9497980ce86d33002","modified":1599795974293},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"2cd96d9033b77e4496dc4d0efd1873dfc1b0031a","modified":1599795974293},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/question.md","hash":"7eb808d9b534a9d9d4d3dfc4e38ad63f59b942b8","modified":1599795974293},{"_id":"themes/hexo-theme-next/.github/workflows/label-commenter.yml","hash":"b6d8162264dc4d6d31f1f9c2a940718f12cff874","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/workflows/labeler.yml","hash":"3acd5189488e720f23e904f2d9d24cf4b15ac1de","modified":1599795974294},{"_id":"themes/hexo-theme-next/.github/workflows/linter.yml","hash":"f499ad31aea9ec598308475ef0b19b7e4177103c","modified":1599795974295},{"_id":"themes/hexo-theme-next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1599795974295},{"_id":"themes/hexo-theme-next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1599795974295},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"6da6d8e75eab558630b7c6a2e5a80dc981362f47","modified":1599795974297},{"_id":"themes/hexo-theme-next/.github/workflows/tester.yml","hash":"f0fe6d5c4242135d9cde0d830d407094ddf7c062","modified":1599795974295},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":1599795974297},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1599795974297},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"b5adf2afa918e2eb1000d63e0d8928a524829a35","modified":1599795974297},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1599795974302},{"_id":"themes/hexo-theme-next/layout/_macro/post.njk","hash":"f381d4c485ae484a114040d5654db648e4ac7473","modified":1599795974302},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.njk","hash":"3481594d36df9eb5e220a6b981d3e5630376a597","modified":1599795974303},{"_id":"themes/hexo-theme-next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1599795974303},{"_id":"themes/hexo-theme-next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1599795974305},{"_id":"themes/hexo-theme-next/layout/_partials/footer.njk","hash":"9c69b85c9ad86ef5c11d2245f91d98f1be248c40","modified":1599795974303},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1599795974307},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":1599795974310},{"_id":"themes/hexo-theme-next/layout/_scripts/index.njk","hash":"48cbbca0e4f97b8c25f2a5c408071603cd257a65","modified":1599795974310},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1599795974310},{"_id":"themes/hexo-theme-next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1599795974311},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1599795974311},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1599795974312},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1599795974314},{"_id":"themes/hexo-theme-next/layout/_third-party/index.njk","hash":"4ca039707745c6a22615741b7411ff2cb0763e6d","modified":1599795974313},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1599795974318},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1599795974320},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1599795974321},{"_id":"themes/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1599795974314},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1599795974314},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1599795974321},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1599795974321},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":1599795974321},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"bbcf0d846d9ddcf968bf4ad179ff7da5dd70867f","modified":1599795974321},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"3b2261da74c7b33cabfbc82cbb3ce9c8046314d4","modified":1599795974321},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1599795974321},{"_id":"themes/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1599795974322},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1599795974322},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1599795974323},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9836e3212f889e94ada4c354c7b83f7d7caa9aa7","modified":1599795974323},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1599795974323},{"_id":"themes/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1599795974323},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1599795974323},{"_id":"themes/hexo-theme-next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1599795974324},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"05be417a17385a31e1a021e1a54b15046cfd8408","modified":1599795974324},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"27129fc4014d723ba93ac77b11342da2ee445d96","modified":1599795974324},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1599795974324},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1599795974324},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"911851fb3a56570b761d133a6e1531ebf864ea83","modified":1599795974325},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1599795974325},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1599795974342},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":1599795974337},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599795974343},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599795974342},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599795974343},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599795974343},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599795974343},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599795974344},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599795974343},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599795974344},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599795974344},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599795974344},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599795974344},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1599795974345},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"a6f78c4cfffa976e4b8043e3486ce99aaba02bda","modified":1599795974345},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599795974345},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1599795974345},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1599795974346},{"_id":"themes/hexo-theme-next/source/js/local-search.js","hash":"0a66cec43424ce8f8eb182b583e92ee15a61dcc7","modified":1599795974346},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"da67f3eed604dcdc4e89280c9db69fe1f62818e9","modified":1599795974347},{"_id":"themes/hexo-theme-next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1599795974347},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"eed4ec020dbf499b6479cbe4e1a90b0b4fe4d1e8","modified":1599795974348},{"_id":"themes/hexo-theme-next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1599795974349},{"_id":"themes/hexo-theme-next/test/helpers/font.js","hash":"8930b1f16facc18dc6764bf6efd753ca50d3f1cb","modified":1599795974349},{"_id":"themes/hexo-theme-next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1599795974349},{"_id":"themes/hexo-theme-next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1599795974349},{"_id":"themes/hexo-theme-next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1599795974349},{"_id":"themes/hexo-theme-next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/group-pictures.js","hash":"caf9f6b9a72e41fb30aa24468a54496fba1fcdd8","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/note.js","hash":"1b6bac741212e7ca763ab7f92ed2d4e2868126f4","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1599795974351},{"_id":"themes/hexo-theme-next/test/tags/pdf.js","hash":"bac003317e5bb5e046848522c5c4a7cf231e53f6","modified":1599795974350},{"_id":"themes/hexo-theme-next/test/tags/video.js","hash":"43aaebbc60f19aa69c03b212afff4c4a3fc3b862","modified":1599795974351},{"_id":"themes/hexo-theme-next/test/validate/index.js","hash":"ef716c1db8e3c93c320f73b6da4010e03b4eb0ae","modified":1599795974351},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1599795974304},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.njk","hash":"9fb4fdaa447b331cff2964a30d7c3f5340817dfc","modified":1599795974303},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1599795974303},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1599795974304},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":1599795974304},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1599795974304},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1599795974305},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"1b6f08cd884081cc67f02c09ce4696c2df4a9d20","modified":1599795974305},{"_id":"themes/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1599795974305},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"789915339a6234d6dd7c710cc1f8e728d9b81d35","modified":1599795974306},{"_id":"themes/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1599795974306},{"_id":"themes/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1599795974307},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1599795974308},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1599795974308},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"1d1eba50a28518dea5bba34b2737cfb9b0f2cf49","modified":1599795974308},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"fbdb5cdbd80970f201f5c75369eaa00aea369235","modified":1599795974308},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1599795974309},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1599795974309},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":1599795974309},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.njk","hash":"b7a66a465e897c27624f0c441375c95c4cb7a5aa","modified":1599795974309},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":1599795974309},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"a27b994ab99c684765895ffebf72ae30dcfa0703","modified":1599795974310},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1599795974311},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1599795974311},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1599795974312},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"d87df68dff14cfb4d91a77230cd1ac795c2a22d5","modified":1599795974312},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1599795974312},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1599795974312},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1599795974313},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1599795974313},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1599795974313},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":1599795974313},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1599795974313},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.njk","hash":"ae2cca696dba96dda7958f0d2b642257599dc11c","modified":1599795974313},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.njk","hash":"b0efe26601037e621b5cb16f0fe2f347ee27acdb","modified":1599795974314},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1599795974314},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":1599795974314},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1599795974315},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1599795974315},{"_id":"themes/hexo-theme-next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1599795974315},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1599795974315},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1599795974315},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"b70157965285a8c1e003c570cfd4b40bcc1fa719","modified":1599795974315},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"8b956fb56284e8fa4a4731b1efd1f25e1b2b4a78","modified":1599795974316},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"7f01be99413143c5158bda6d83d72bfae6ea5864","modified":1599795974316},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1599795974316},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"67d80a57f6b2cf23d56276ca8f30f25e3e8707e9","modified":1599795974316},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"545ebbd9f5aeb9f7a8e23737664c1f7d701275e1","modified":1599795974318},{"_id":"themes/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1599795974318},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1599795974318},{"_id":"themes/hexo-theme-next/scripts/events/lib/utils.js","hash":"e227174a8ebab8d5b6e8e26faf4fd66c43f045ca","modified":1599795974319},{"_id":"themes/hexo-theme-next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":1599795974319},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"199fa9a70914d0019cf0e47f55491183d53d1533","modified":1599795974319},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1599795974319},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1599795974319},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"a9b18b7447cd5a56cb692c574463a27356eb7fa6","modified":1599795974320},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"7b8ce8e9a71cf083f5337fb7c9586be8f7c316e8","modified":1599795974320},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":1599795974320},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":1599795974320},{"_id":"themes/hexo-theme-next/scripts/filters/comment/valine.js","hash":"c67984fc868d4799b3aa6d3b3cd060e5260b3a98","modified":1599795974320},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"77dddb398fb1beefc2b824bec7b094030fdc3df9","modified":1599795974341},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1599795974341},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1599795974342},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1599795974342},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1599795974347},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"efbeee48d208a3960b4e352fab3feb2b2dab7ef8","modified":1599795974342},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1599795974325},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":1599795974326},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":1599795974326},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1599795974329},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"28368ac06d04ccf0bbf3dc9e0dfcf341c200b28c","modified":1599795974332},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1599795974332},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"ea96e86b6bcb160351c18a7edc4a561918a820cb","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1599795974334},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"a472fb1afc6486266b85f773501a290e0a80c370","modified":1599795974335},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1599795974335},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e1c85ab2831fd7d4bb84aea1850a0160be0023e8","modified":1599795974335},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1599795974337},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"7ad04d5a02a7618ebb09c1d5a435d46c4df2c620","modified":1599795974337},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1599795974335},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1599795974338},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":1599795974338},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1599795974338},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"faadd1616a18d626f145e9fbdbfb770deab35b2c","modified":1599795974338},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1599795974338},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1599795974339},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1599795974339},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1599795974339},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1599795974339},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"e1550114d6f5e828d791831153ef0912a14b4d49","modified":1599795974339},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599795974340},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1599795974340},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1599795974340},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":1599795974340},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d314bbe10a7aed68c364c5bd26057f0d0825a7e8","modified":1599795974340},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":1599795974341},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1599795974341},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1599795974326},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1599795974326},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1599795974326},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"19fc5ca0784f5d2befddb9d8bc463b916c5c2518","modified":1599795974326},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1599795974327},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1599795974327},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8998a07acf0dbd10811835c8dfc91d92e680bcae","modified":1599795974327},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1599795974328},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":1599795974328},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1599795974328},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"d6ecc5dfd15c588782ba5e1df9f915b305622aef","modified":1599795974328},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cf6540e12c2de5befcfb7e92d915e3b75fd53dfa","modified":1599795974328},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"27001ad06f69ff035639210ab2f614861b21a4f4","modified":1599795974328},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1599795974329},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1599795974329},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1599795974330},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":1599795974330},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1599795974330},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1599795974330},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"5d8fc91cdb7ee313eb367dcec7d5b2429f98242f","modified":1599795974330},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/footer.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a83a1236564b81eab9a23dba9a634a6de90d4726","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1599795974331},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1599795974332},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1599795974332},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1599795974332},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1599795974332},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"521b36ea7bb3a843029cbfbb6b5e76e91c40a19f","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"55060cade4547779ba5996643d93763373b5127c","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar.styl","hash":"43f7d37948232553873ee346d625457bfe704e74","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"a1936845d423c39adb0df4389e9b69b27cdc79cd","modified":1599795974333},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1599795974334},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":1599795974334},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1599795974335},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1599795974336},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":1599795974336},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"acfdec45e56cdd6a5ea61e0154f8a6d1bc068214","modified":1599795974336},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1599795974336},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"29bef220307d86b1eafbb3714381df32d48b5a60","modified":1599795974336},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1599795974336},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"dcf426c2a4836386c0c27235de3f9a95c5de67cc","modified":1599795974337},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tags.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1599795974337},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"70d7fc0235f241c1834ae40031701e622b00e3e3","modified":1599881613536},{"_id":"themes/hexo-theme-next/source/.DS_Store","hash":"4ee70626acd7cdf00f47e5ff88057eb1888561a0","modified":1599881641486},{"_id":"themes/hexo-theme-next/source/js/.DS_Store","hash":"dc5d4b126af6d7b8c411fe4788a0367851494a38","modified":1599892164794},{"_id":"source/_posts/JMM Java内存模型.md","hash":"b1d9f18acaf1ed9a1824860f1188d11b01cd09ef","modified":1599898462458},{"_id":"source/_posts/JMM JAVA内存模型.md","hash":"2f336dd7b0317d211f1987ba8929c4b605349363","modified":1599898758046},{"_id":"source/_posts/JAVA反射.md","hash":"458d9f7804a69e58dc84a45e1d03cc3cdafe182f","modified":1600940612933}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"JMM JAVA内存模型","_content":"\n要想深入了解Java并发编程，就要先理解好Java内存模型，而要理解Java内存模型又不得不从硬件、计算机内存模型说起\n\n## **CPU执行过程**\n\n计算机在执行程序时，每条指令都是在CPU中执行的，而执行的时候，又免不了要和数据打交道，而计算机上面的临时数据，是储存在主存中的。计算机内存包括高速缓存和主存。我们知道CPU执行指令的速度比从主存读取数据和向主存写入数据快很多，所以为了高效利用CPU，CPU增加了高速缓存(cache)来匹配CPU的执行速度，最终程序的执行过程如下\n\n1. 首先会将数据从主存中复制一份到CPU的高速缓存中\n2. 当CPU执行计算的时候就可以直接从高速缓存中读取数据和写入数据\n3. 当运算结束后，再将高速缓存的数据更新到主存中\n\n## **缓存一致性问题**\n\n上面的执行过程在单线程情况下并没有问题，但是在多线程情况下就会出现问题，因为CPU如果含有多个核心，则每个核心都有自己独占高速缓存，如果出现多个线程同时执行同一个操作，那么结果是无法预知。例如2个线程同时执行i++，假设i的初始值是0，那么我们希望2个线程执行完成之后i的值变为2，但是事实会是这样吗？\n\n![waYNGT.jpg](https://s1.ax1x.com/2020/09/12/waYNGT.jpg)\n\n可能出现的情况有：\n\n1. 线程1先将i=0从主存中读取到线程1的高速缓存中，然后CPU完成运算，再将i=1写入到主存中，然后线程2开始从主存中读取i=1到线程2的高速缓存中，然后CPU完成运算，再将i=2写入到主存中，那么i=2即为我们想要的结果。\n2. 线程1将i=0从主存中读取到线程1的高速缓存中的同时线程2也从主存中读取i=0到线程2的高速缓存中，然后线程1和线程2完成运算后，也都将i=1写入到主存中，那么结果i=1，结果就不是我们想要的了。出现这个情况，我们称为缓存不一致问题。\n\n那么如何解决CPU出现的缓存不一致问题呢？通常使用的解决方法有2种：\n\n1. 通过给总线加锁\n2. 使用缓存一致性协议\n\n[![watpoq.jpg](https://s1.ax1x.com/2020/09/12/watpoq.jpg)](https://imgchr.com/i/watpoq)\n\n第1种方法虽然也达到了目的，但是在总线被锁住的期间，其他的CPU也无法访问主存，效率很低，所以就出现了缓存一致性协议即第2种方法，其中最出名的就是Intel的MESI协议，MESI协议保证每个CPU高速缓存中的变量都是一致的。它的核心思想是，当CPU写数据时候，如果发现操作的变量是共享变量(即其他CPU上也存在该变量)，就会发出信号通知其他CPU将它高速缓存中缓存这个变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己高速缓存中缓存该变量的缓存行为无效状态，那么它就会从主存中重新读取。\n\n[![watmwR.jpg](https://s1.ax1x.com/2020/09/12/watmwR.jpg)](https://imgchr.com/i/watmwR)\n\n## **处理器重排序问题**\n\n在多线程场景下，CPU除了会出现缓存一致性问题，还会出现因为处理器重排序即处理器(CPU)为了提高效率可能会对输入的代码进行乱序执行，而造成多线程的情况下出现问题。\n\n例如：\n\n```\n//线程1:\ncontext = loadContext(); //语句1\ninited = true; //语句2\n//线程2: \nwhile(!inited ){\n\tsleep()\n}\ndoSomethingwithconfig(context);\n```\n\n线程1由于处理器重排序，先执行性了语句2，那么此时线程2会认为context已经初始化完成，那么跳出循环，去执行doSomethingwithconfig(context)方法，实际上此时context并未初始化(即线程1的语句1还未执行)，而导致程序出错。\n\n## **什么是计算机内存模型**\n\n上面提到的缓存一致性问题、处理器重排序问题都是在多线程情况下CPU可能出现的问题，那我们应该怎么处理这些问题？\n\n> 可见性即当一个变量修改后，这个变量会马上更新到主存中，其他线程会收到通知这个变量修改过了，使用这个变量的时候重新去主存获取\n\n## **什么是Java内存模型**\n\n从前面的介绍了解到计算机内存模型是一种解决多线程场景下的一个主存操作规范，既然是规范，那么不同的编程语言都可以遵循这种操作规范，在多线程场景下访问主存保证原子性、可见性、有序性。\n\nJava内存模型(Java Memory Model，JMM)即是Java语言对这个操作规范的遵循，JMM规定了所有的变量都存储在主存中，每个线程都有自己的工作区，线程将使用到的变量从主存中复制一份到自己的工作区，线程对变量的所有操作(读取、赋值等)都必须在工作区，不同的线程也无法直接访问对方工作区，线程之间的消息传递都需要通过主存来完成。可以把这里主存类比成计算机内存模型中的主存，工作区类比成计算机内存模型中的高速缓存。\n\n![waNmjg.jpg](https://s1.ax1x.com/2020/09/12/waNmjg.jpg)\n\n而我们知道JMM其实是工作主存中的，Java内存模型中的工作区也是主存中的一部分，所以可以这样说Java内存模型解决的是内存一致性问题(主存和主存)而计算机内存模型解决的是缓存一致性问题(CPU高速缓存和主存)，这两个模型类似，但是作用域不一样，Java内存模型保证的是主存和主存之间的原子性、可见性、有序性，而计算机内存模型保证的是CPU高速缓存和主存之间的原子性、可见性、有序性。\n\n[![waanTs.jpg](https://s1.ax1x.com/2020/09/12/waanTs.jpg)](https://imgchr.com/i/waanTs)\n\n","source":"_posts/JMM JAVA内存模型.md","raw":"---\ntitle: JMM JAVA内存模型\n---\n\n要想深入了解Java并发编程，就要先理解好Java内存模型，而要理解Java内存模型又不得不从硬件、计算机内存模型说起\n\n## **CPU执行过程**\n\n计算机在执行程序时，每条指令都是在CPU中执行的，而执行的时候，又免不了要和数据打交道，而计算机上面的临时数据，是储存在主存中的。计算机内存包括高速缓存和主存。我们知道CPU执行指令的速度比从主存读取数据和向主存写入数据快很多，所以为了高效利用CPU，CPU增加了高速缓存(cache)来匹配CPU的执行速度，最终程序的执行过程如下\n\n1. 首先会将数据从主存中复制一份到CPU的高速缓存中\n2. 当CPU执行计算的时候就可以直接从高速缓存中读取数据和写入数据\n3. 当运算结束后，再将高速缓存的数据更新到主存中\n\n## **缓存一致性问题**\n\n上面的执行过程在单线程情况下并没有问题，但是在多线程情况下就会出现问题，因为CPU如果含有多个核心，则每个核心都有自己独占高速缓存，如果出现多个线程同时执行同一个操作，那么结果是无法预知。例如2个线程同时执行i++，假设i的初始值是0，那么我们希望2个线程执行完成之后i的值变为2，但是事实会是这样吗？\n\n![waYNGT.jpg](https://s1.ax1x.com/2020/09/12/waYNGT.jpg)\n\n可能出现的情况有：\n\n1. 线程1先将i=0从主存中读取到线程1的高速缓存中，然后CPU完成运算，再将i=1写入到主存中，然后线程2开始从主存中读取i=1到线程2的高速缓存中，然后CPU完成运算，再将i=2写入到主存中，那么i=2即为我们想要的结果。\n2. 线程1将i=0从主存中读取到线程1的高速缓存中的同时线程2也从主存中读取i=0到线程2的高速缓存中，然后线程1和线程2完成运算后，也都将i=1写入到主存中，那么结果i=1，结果就不是我们想要的了。出现这个情况，我们称为缓存不一致问题。\n\n那么如何解决CPU出现的缓存不一致问题呢？通常使用的解决方法有2种：\n\n1. 通过给总线加锁\n2. 使用缓存一致性协议\n\n[![watpoq.jpg](https://s1.ax1x.com/2020/09/12/watpoq.jpg)](https://imgchr.com/i/watpoq)\n\n第1种方法虽然也达到了目的，但是在总线被锁住的期间，其他的CPU也无法访问主存，效率很低，所以就出现了缓存一致性协议即第2种方法，其中最出名的就是Intel的MESI协议，MESI协议保证每个CPU高速缓存中的变量都是一致的。它的核心思想是，当CPU写数据时候，如果发现操作的变量是共享变量(即其他CPU上也存在该变量)，就会发出信号通知其他CPU将它高速缓存中缓存这个变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己高速缓存中缓存该变量的缓存行为无效状态，那么它就会从主存中重新读取。\n\n[![watmwR.jpg](https://s1.ax1x.com/2020/09/12/watmwR.jpg)](https://imgchr.com/i/watmwR)\n\n## **处理器重排序问题**\n\n在多线程场景下，CPU除了会出现缓存一致性问题，还会出现因为处理器重排序即处理器(CPU)为了提高效率可能会对输入的代码进行乱序执行，而造成多线程的情况下出现问题。\n\n例如：\n\n```\n//线程1:\ncontext = loadContext(); //语句1\ninited = true; //语句2\n//线程2: \nwhile(!inited ){\n\tsleep()\n}\ndoSomethingwithconfig(context);\n```\n\n线程1由于处理器重排序，先执行性了语句2，那么此时线程2会认为context已经初始化完成，那么跳出循环，去执行doSomethingwithconfig(context)方法，实际上此时context并未初始化(即线程1的语句1还未执行)，而导致程序出错。\n\n## **什么是计算机内存模型**\n\n上面提到的缓存一致性问题、处理器重排序问题都是在多线程情况下CPU可能出现的问题，那我们应该怎么处理这些问题？\n\n> 可见性即当一个变量修改后，这个变量会马上更新到主存中，其他线程会收到通知这个变量修改过了，使用这个变量的时候重新去主存获取\n\n## **什么是Java内存模型**\n\n从前面的介绍了解到计算机内存模型是一种解决多线程场景下的一个主存操作规范，既然是规范，那么不同的编程语言都可以遵循这种操作规范，在多线程场景下访问主存保证原子性、可见性、有序性。\n\nJava内存模型(Java Memory Model，JMM)即是Java语言对这个操作规范的遵循，JMM规定了所有的变量都存储在主存中，每个线程都有自己的工作区，线程将使用到的变量从主存中复制一份到自己的工作区，线程对变量的所有操作(读取、赋值等)都必须在工作区，不同的线程也无法直接访问对方工作区，线程之间的消息传递都需要通过主存来完成。可以把这里主存类比成计算机内存模型中的主存，工作区类比成计算机内存模型中的高速缓存。\n\n![waNmjg.jpg](https://s1.ax1x.com/2020/09/12/waNmjg.jpg)\n\n而我们知道JMM其实是工作主存中的，Java内存模型中的工作区也是主存中的一部分，所以可以这样说Java内存模型解决的是内存一致性问题(主存和主存)而计算机内存模型解决的是缓存一致性问题(CPU高速缓存和主存)，这两个模型类似，但是作用域不一样，Java内存模型保证的是主存和主存之间的原子性、可见性、有序性，而计算机内存模型保证的是CPU高速缓存和主存之间的原子性、可见性、有序性。\n\n[![waanTs.jpg](https://s1.ax1x.com/2020/09/12/waanTs.jpg)](https://imgchr.com/i/waanTs)\n\n","slug":"JMM JAVA内存模型","published":1,"date":"2020-09-10T02:59:39.888Z","updated":"2020-09-12T08:19:18.046Z","_id":"ckezeak3r00007l342nf76g5y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>要想深入了解Java并发编程，就要先理解好Java内存模型，而要理解Java内存模型又不得不从硬件、计算机内存模型说起</p>\n<h2 id=\"CPU执行过程\"><a href=\"#CPU执行过程\" class=\"headerlink\" title=\"CPU执行过程\"></a><strong>CPU执行过程</strong></h2><p>计算机在执行程序时，每条指令都是在CPU中执行的，而执行的时候，又免不了要和数据打交道，而计算机上面的临时数据，是储存在主存中的。计算机内存包括高速缓存和主存。我们知道CPU执行指令的速度比从主存读取数据和向主存写入数据快很多，所以为了高效利用CPU，CPU增加了高速缓存(cache)来匹配CPU的执行速度，最终程序的执行过程如下</p>\n<ol>\n<li>首先会将数据从主存中复制一份到CPU的高速缓存中</li>\n<li>当CPU执行计算的时候就可以直接从高速缓存中读取数据和写入数据</li>\n<li>当运算结束后，再将高速缓存的数据更新到主存中</li>\n</ol>\n<h2 id=\"缓存一致性问题\"><a href=\"#缓存一致性问题\" class=\"headerlink\" title=\"缓存一致性问题\"></a><strong>缓存一致性问题</strong></h2><p>上面的执行过程在单线程情况下并没有问题，但是在多线程情况下就会出现问题，因为CPU如果含有多个核心，则每个核心都有自己独占高速缓存，如果出现多个线程同时执行同一个操作，那么结果是无法预知。例如2个线程同时执行i++，假设i的初始值是0，那么我们希望2个线程执行完成之后i的值变为2，但是事实会是这样吗？</p>\n<p><img src=\"https://s1.ax1x.com/2020/09/12/waYNGT.jpg\" alt=\"waYNGT.jpg\"></p>\n<p>可能出现的情况有：</p>\n<ol>\n<li>线程1先将i=0从主存中读取到线程1的高速缓存中，然后CPU完成运算，再将i=1写入到主存中，然后线程2开始从主存中读取i=1到线程2的高速缓存中，然后CPU完成运算，再将i=2写入到主存中，那么i=2即为我们想要的结果。</li>\n<li>线程1将i=0从主存中读取到线程1的高速缓存中的同时线程2也从主存中读取i=0到线程2的高速缓存中，然后线程1和线程2完成运算后，也都将i=1写入到主存中，那么结果i=1，结果就不是我们想要的了。出现这个情况，我们称为缓存不一致问题。</li>\n</ol>\n<p>那么如何解决CPU出现的缓存不一致问题呢？通常使用的解决方法有2种：</p>\n<ol>\n<li>通过给总线加锁</li>\n<li>使用缓存一致性协议</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/watpoq\"><img src=\"https://s1.ax1x.com/2020/09/12/watpoq.jpg\" alt=\"watpoq.jpg\"></a></p>\n<p>第1种方法虽然也达到了目的，但是在总线被锁住的期间，其他的CPU也无法访问主存，效率很低，所以就出现了缓存一致性协议即第2种方法，其中最出名的就是Intel的MESI协议，MESI协议保证每个CPU高速缓存中的变量都是一致的。它的核心思想是，当CPU写数据时候，如果发现操作的变量是共享变量(即其他CPU上也存在该变量)，就会发出信号通知其他CPU将它高速缓存中缓存这个变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己高速缓存中缓存该变量的缓存行为无效状态，那么它就会从主存中重新读取。</p>\n<p><a href=\"https://imgchr.com/i/watmwR\"><img src=\"https://s1.ax1x.com/2020/09/12/watmwR.jpg\" alt=\"watmwR.jpg\"></a></p>\n<h2 id=\"处理器重排序问题\"><a href=\"#处理器重排序问题\" class=\"headerlink\" title=\"处理器重排序问题\"></a><strong>处理器重排序问题</strong></h2><p>在多线程场景下，CPU除了会出现缓存一致性问题，还会出现因为处理器重排序即处理器(CPU)为了提高效率可能会对输入的代码进行乱序执行，而造成多线程的情况下出现问题。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;线程1:</span><br><span class=\"line\">context &#x3D; loadContext(); &#x2F;&#x2F;语句1</span><br><span class=\"line\">inited &#x3D; true; &#x2F;&#x2F;语句2</span><br><span class=\"line\">&#x2F;&#x2F;线程2: </span><br><span class=\"line\">while(!inited )&#123;</span><br><span class=\"line\">\tsleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure>\n\n<p>线程1由于处理器重排序，先执行性了语句2，那么此时线程2会认为context已经初始化完成，那么跳出循环，去执行doSomethingwithconfig(context)方法，实际上此时context并未初始化(即线程1的语句1还未执行)，而导致程序出错。</p>\n<h2 id=\"什么是计算机内存模型\"><a href=\"#什么是计算机内存模型\" class=\"headerlink\" title=\"什么是计算机内存模型\"></a><strong>什么是计算机内存模型</strong></h2><p>上面提到的缓存一致性问题、处理器重排序问题都是在多线程情况下CPU可能出现的问题，那我们应该怎么处理这些问题？</p>\n<blockquote>\n<p>可见性即当一个变量修改后，这个变量会马上更新到主存中，其他线程会收到通知这个变量修改过了，使用这个变量的时候重新去主存获取</p>\n</blockquote>\n<h2 id=\"什么是Java内存模型\"><a href=\"#什么是Java内存模型\" class=\"headerlink\" title=\"什么是Java内存模型\"></a><strong>什么是Java内存模型</strong></h2><p>从前面的介绍了解到计算机内存模型是一种解决多线程场景下的一个主存操作规范，既然是规范，那么不同的编程语言都可以遵循这种操作规范，在多线程场景下访问主存保证原子性、可见性、有序性。</p>\n<p>Java内存模型(Java Memory Model，JMM)即是Java语言对这个操作规范的遵循，JMM规定了所有的变量都存储在主存中，每个线程都有自己的工作区，线程将使用到的变量从主存中复制一份到自己的工作区，线程对变量的所有操作(读取、赋值等)都必须在工作区，不同的线程也无法直接访问对方工作区，线程之间的消息传递都需要通过主存来完成。可以把这里主存类比成计算机内存模型中的主存，工作区类比成计算机内存模型中的高速缓存。</p>\n<p><img src=\"https://s1.ax1x.com/2020/09/12/waNmjg.jpg\" alt=\"waNmjg.jpg\"></p>\n<p>而我们知道JMM其实是工作主存中的，Java内存模型中的工作区也是主存中的一部分，所以可以这样说Java内存模型解决的是内存一致性问题(主存和主存)而计算机内存模型解决的是缓存一致性问题(CPU高速缓存和主存)，这两个模型类似，但是作用域不一样，Java内存模型保证的是主存和主存之间的原子性、可见性、有序性，而计算机内存模型保证的是CPU高速缓存和主存之间的原子性、可见性、有序性。</p>\n<p><a href=\"https://imgchr.com/i/waanTs\"><img src=\"https://s1.ax1x.com/2020/09/12/waanTs.jpg\" alt=\"waanTs.jpg\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>要想深入了解Java并发编程，就要先理解好Java内存模型，而要理解Java内存模型又不得不从硬件、计算机内存模型说起</p>\n<h2 id=\"CPU执行过程\"><a href=\"#CPU执行过程\" class=\"headerlink\" title=\"CPU执行过程\"></a><strong>CPU执行过程</strong></h2><p>计算机在执行程序时，每条指令都是在CPU中执行的，而执行的时候，又免不了要和数据打交道，而计算机上面的临时数据，是储存在主存中的。计算机内存包括高速缓存和主存。我们知道CPU执行指令的速度比从主存读取数据和向主存写入数据快很多，所以为了高效利用CPU，CPU增加了高速缓存(cache)来匹配CPU的执行速度，最终程序的执行过程如下</p>\n<ol>\n<li>首先会将数据从主存中复制一份到CPU的高速缓存中</li>\n<li>当CPU执行计算的时候就可以直接从高速缓存中读取数据和写入数据</li>\n<li>当运算结束后，再将高速缓存的数据更新到主存中</li>\n</ol>\n<h2 id=\"缓存一致性问题\"><a href=\"#缓存一致性问题\" class=\"headerlink\" title=\"缓存一致性问题\"></a><strong>缓存一致性问题</strong></h2><p>上面的执行过程在单线程情况下并没有问题，但是在多线程情况下就会出现问题，因为CPU如果含有多个核心，则每个核心都有自己独占高速缓存，如果出现多个线程同时执行同一个操作，那么结果是无法预知。例如2个线程同时执行i++，假设i的初始值是0，那么我们希望2个线程执行完成之后i的值变为2，但是事实会是这样吗？</p>\n<p><img src=\"https://s1.ax1x.com/2020/09/12/waYNGT.jpg\" alt=\"waYNGT.jpg\"></p>\n<p>可能出现的情况有：</p>\n<ol>\n<li>线程1先将i=0从主存中读取到线程1的高速缓存中，然后CPU完成运算，再将i=1写入到主存中，然后线程2开始从主存中读取i=1到线程2的高速缓存中，然后CPU完成运算，再将i=2写入到主存中，那么i=2即为我们想要的结果。</li>\n<li>线程1将i=0从主存中读取到线程1的高速缓存中的同时线程2也从主存中读取i=0到线程2的高速缓存中，然后线程1和线程2完成运算后，也都将i=1写入到主存中，那么结果i=1，结果就不是我们想要的了。出现这个情况，我们称为缓存不一致问题。</li>\n</ol>\n<p>那么如何解决CPU出现的缓存不一致问题呢？通常使用的解决方法有2种：</p>\n<ol>\n<li>通过给总线加锁</li>\n<li>使用缓存一致性协议</li>\n</ol>\n<p><a href=\"https://imgchr.com/i/watpoq\"><img src=\"https://s1.ax1x.com/2020/09/12/watpoq.jpg\" alt=\"watpoq.jpg\"></a></p>\n<p>第1种方法虽然也达到了目的，但是在总线被锁住的期间，其他的CPU也无法访问主存，效率很低，所以就出现了缓存一致性协议即第2种方法，其中最出名的就是Intel的MESI协议，MESI协议保证每个CPU高速缓存中的变量都是一致的。它的核心思想是，当CPU写数据时候，如果发现操作的变量是共享变量(即其他CPU上也存在该变量)，就会发出信号通知其他CPU将它高速缓存中缓存这个变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己高速缓存中缓存该变量的缓存行为无效状态，那么它就会从主存中重新读取。</p>\n<p><a href=\"https://imgchr.com/i/watmwR\"><img src=\"https://s1.ax1x.com/2020/09/12/watmwR.jpg\" alt=\"watmwR.jpg\"></a></p>\n<h2 id=\"处理器重排序问题\"><a href=\"#处理器重排序问题\" class=\"headerlink\" title=\"处理器重排序问题\"></a><strong>处理器重排序问题</strong></h2><p>在多线程场景下，CPU除了会出现缓存一致性问题，还会出现因为处理器重排序即处理器(CPU)为了提高效率可能会对输入的代码进行乱序执行，而造成多线程的情况下出现问题。</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;线程1:</span><br><span class=\"line\">context &#x3D; loadContext(); &#x2F;&#x2F;语句1</span><br><span class=\"line\">inited &#x3D; true; &#x2F;&#x2F;语句2</span><br><span class=\"line\">&#x2F;&#x2F;线程2: </span><br><span class=\"line\">while(!inited )&#123;</span><br><span class=\"line\">\tsleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure>\n\n<p>线程1由于处理器重排序，先执行性了语句2，那么此时线程2会认为context已经初始化完成，那么跳出循环，去执行doSomethingwithconfig(context)方法，实际上此时context并未初始化(即线程1的语句1还未执行)，而导致程序出错。</p>\n<h2 id=\"什么是计算机内存模型\"><a href=\"#什么是计算机内存模型\" class=\"headerlink\" title=\"什么是计算机内存模型\"></a><strong>什么是计算机内存模型</strong></h2><p>上面提到的缓存一致性问题、处理器重排序问题都是在多线程情况下CPU可能出现的问题，那我们应该怎么处理这些问题？</p>\n<blockquote>\n<p>可见性即当一个变量修改后，这个变量会马上更新到主存中，其他线程会收到通知这个变量修改过了，使用这个变量的时候重新去主存获取</p>\n</blockquote>\n<h2 id=\"什么是Java内存模型\"><a href=\"#什么是Java内存模型\" class=\"headerlink\" title=\"什么是Java内存模型\"></a><strong>什么是Java内存模型</strong></h2><p>从前面的介绍了解到计算机内存模型是一种解决多线程场景下的一个主存操作规范，既然是规范，那么不同的编程语言都可以遵循这种操作规范，在多线程场景下访问主存保证原子性、可见性、有序性。</p>\n<p>Java内存模型(Java Memory Model，JMM)即是Java语言对这个操作规范的遵循，JMM规定了所有的变量都存储在主存中，每个线程都有自己的工作区，线程将使用到的变量从主存中复制一份到自己的工作区，线程对变量的所有操作(读取、赋值等)都必须在工作区，不同的线程也无法直接访问对方工作区，线程之间的消息传递都需要通过主存来完成。可以把这里主存类比成计算机内存模型中的主存，工作区类比成计算机内存模型中的高速缓存。</p>\n<p><img src=\"https://s1.ax1x.com/2020/09/12/waNmjg.jpg\" alt=\"waNmjg.jpg\"></p>\n<p>而我们知道JMM其实是工作主存中的，Java内存模型中的工作区也是主存中的一部分，所以可以这样说Java内存模型解决的是内存一致性问题(主存和主存)而计算机内存模型解决的是缓存一致性问题(CPU高速缓存和主存)，这两个模型类似，但是作用域不一样，Java内存模型保证的是主存和主存之间的原子性、可见性、有序性，而计算机内存模型保证的是CPU高速缓存和主存之间的原子性、可见性、有序性。</p>\n<p><a href=\"https://imgchr.com/i/waanTs\"><img src=\"https://s1.ax1x.com/2020/09/12/waanTs.jpg\" alt=\"waanTs.jpg\"></a></p>\n"},{"title":"java反射","_content":"\n## **反射的定义：**\n\n对于任意一个实体类，都能知道它的方法和属性，对于任意一个对象，都能调用它的属性和方法。\n\n**正射**：我们平常用的最多的 `new` 方式实例化对象的方式就是一种正射的体现。假如我需要实例化一个`HashMap`，代码就会是这样子。\n\n```\nMap<Integer, Integer> map = new HashMap<>();\nmap.put(1, 1);\n```\n\n某一天发现，该段程序不适合用 HashMap 存储键值对，更倾向于用`LinkedHashMap`存储。重新编写代码后变成下面这个样子。\n\n```\nMap<Integer, Integer> map = new LinkedHashMap<>();\nmap.put(1, 1);\n```\n\n假如又有一天，发现数据还是适合用 HashMap来存储，难道又要重新修改源码吗？\n\n```\n发现问题了吗？我们每次改变一种需求，都要去重新修改源码，然后对代码进行编译，打包，再到 JVM 上重启项目。这么些步骤下来，效率非常低。\n```\n\n[![0SgNcT.md.png](https://s1.ax1x.com/2020/09/24/0SgNcT.md.png)](https://imgchr.com/i/0SgNcT)\n\n对于这种**需求频繁变更但变更不大**的场景，频繁地更改源码肯定是一种不允许的操作，我们可以使用一个`开关`，判断什么时候使用哪一种数据结构。\n\n```\npublic Map<Integer, Integer> getMap(String param) {\n    Map<Integer, Integer> map = null;\n    if (param.equals(\"HashMap\")) {\n        map = new HashMap<>();\n    } else if (param.equals(\"LinkedHashMap\")) {\n        map = new LinkedHashMap<>();\n    } else if (param.equals(\"WeakHashMap\")) {\n        map = new WeakHashMap<>();\n    }\n    return map;\n}\n```\n\n通过传入参数`param`决定使用哪一种数据结构，可以在项目运行时，通过**动态传入参数**决定使用哪一个数据结构。\n\n如果某一天还想用`TreeMap`，还是避免不了修改源码，重新编译执行的弊端。这个时候，**反射**就派上用场了。\n\n在代码运行之前，我们**不确定**将来会使用哪一种数据结构，只有在程序**运行时才决定**使用哪一个数据类，而`反射`可以在**程序运行过程**中动态**获取类信息**和**调用类方法**。通过反射构造类实例，代码会演变成下面这样。\n\n```java\npublic Map<Integer, Integer> getMap(String className) {\n    Class clazz = Class.forName(className);\n    Consructor con = clazz.getConstructor();\n    return (Map<Integer, Integer>) con.newInstance();\n}\n\n```\n\n无论使用什么 Map，只要实现了`Map接口`，就可以使用`全类名路径`传入到方法中，获得对应的 Map 实例。例如java.util.HashMap / java.util.LinkedHashMap····如果要创建其它类例如`WeakHashMap`，我也**不需要修改上面这段源码**。\n\n我们来回顾一下如何从 `new` 一个对象引出使用`反射`的。\n\n- 在不使用反射时，构造对象使用 new 方式实现，这种方式在**编译期**就可以把对象的类型确定下来。\n- 如果需求发生变更，需要构造另一个对象，则需要修改源码，非常不优雅，所以我们通过使用`开关`，在程序运行时判断需要构造哪一个对象，在运行时可以**变更开关**来实例化不同的数据结构。\n- 如果还有其它扩展的类有可能被使用，就会创建出**非常多的分支**，且在编码时不知道有什么其他的类被使用到，假如日后`Map`接口下多了一个集合类是`xxxHashMap`，还得创建分支，此时引出了反射：可以在`运行时`才确定使用哪一个数据类，在切换类时，无需重新修改源码、编译程序。\n\n第一章总结：\n\n- 反射的**思想**：**在程序运行过程中确定和解析数据类的类型。**\n- 反射的**作用**：对于在`编译期`无法确定使用哪个数据类的场景，通过`反射`可以在程序运行时**构造出不同的数据类实例**。\n\n## 反射的基本使用\n\nJava 反射的主要组成部分有4个：\n\n- `Class`：任何运行在内存中的所有类都是该 Class 类的实例对象，每个 Class 类对象内部都包含了本来的**所有信息**。记着一句话，通过反射干任何事，先找 Class 准没错！\n- `Field`：描述一个类的**属性**，内部包含了该属性的所有信息，例如**数据类型，属性名，访问修饰符**······\n- `Constructor`：描述一个类的**构造方法**，内部包含了构造方法的所有信息，例如**参数类型，参数名字，访问修饰符**······\n- `Method`：描述一个类的**所有方法**（包括抽象方法），内部包含了该方法的所有信息，与`Constructor`类似，不同之处是 Method 拥有**返回值类型**信息，因为构造方法是没有返回值的。\n\n如果用到了反射，离不开这核心的`4`个类，只有去了解它们内部提供了哪些信息，有什么作用，运用它们的时候才能**易如反掌**。\n\n![0ShXAe.jpg](https://s1.ax1x.com/2020/09/24/0ShXAe.jpg)\n\n在学习反射的基本使用时，我会用一个`SmallPineapple`类作为模板进行说明，首先我们先来熟悉这个类的基本组成：**属性，构造函数和方法**\n\n```\npublic class SmallPineapple {\n    public String name;\n    public int age;\n    private double weight; // 体重只有自己知道\n    \n    public SmallPineapple() {}\n    \n    public SmallPineapple(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public void getInfo() {\n        System.out.print(\"[\"+ name + \" 的年龄是：\" + age + \"]\");\n    }\n}\n```\n\n反射中的用法有非常非常多，常见的功能有以下这几个：\n\n- 在运行时获取一个类的 **Class 对象**\n- 在运行时构造一个类的**实例化对象**\n- 在运行时获取一个类的所有信息：**变量、方法、构造器、注解**\n\n### 获取类的 Class 对象\n\n在 Java 中，每一个类都会有专属于自己的 Class 对象，当我们编写完`.java`文件后，使用`javac`编译后，就会产生一个字节码文件`.class`，在字节码文件中包含类的所有信息，如`属性`，`构造方法`，`方法`······当字节码文件被装载进虚拟机执行时，会在内存中生成 Class 对象，它包含了该类内部的所有信息，在程序运行时可以获取这些信息。\n\n获取 Class 对象的方法有`3`种：\n\n- `类名.class`：这种获取方式只有在`编译`前已经声明了该类的类型才能获取到 Class 对象\n\n```\nClass clazz = SmallPineapple.class;\n```\n\n- `实例.getClass()`：通过实例化对象获取该实例的 Class 对象\n\n```\nSmallPineapple sp = new SmallPineapple();\nClass clazz = sp.getClass();\n```\n\n- `Class.forName(className)`：通过类的**全限定名**获取该类的 Class 对象\n\n```\nClass clazz = Class.forName(\"com.bean.smallpineapple\");\n```\n\n拿到 `Class`对象就可以对它为所欲为了：剥开它的皮（获取**类信息**）、指挥它做事（调用它的**方法**），看透它的一切（获取**属性**），总之它就没有隐私了。\n\n不过在程序中，每个类的 Class 对象只有一个，也就是说你只有这一个`奴隶`。我们用上面三种方式测试，通过三种方式打印各个 `Class` 对象都是相同的。\n\n```\nClass clazz1 = Class.forName(\"com.bean.SmallPineapple\");\nClass clazz2 = SmallPineapple.class;\nSmallPineapple instance = new SmallPineapple();\nClass clazz3 = instance.getClass();\nSystem.out.println(\"Class.forName() == SmallPineapple.class:\" + (clazz1 == clazz2));\nSystem.out.println(\"Class.forName() == instance.getClass():\" + (clazz1 == clazz3));\nSystem.out.println(\"instance.getClass() == SmallPineapple.class:\" + (clazz2 == clazz3));\n```\n\n[![0S4H8s.jpg](https://s1.ax1x.com/2020/09/24/0S4H8s.jpg)](https://imgchr.com/i/0S4H8s)\n\n```\n内存中只有一个 Class 对象的原因要牵扯到 JVM 类加载机制的双亲委派模型，它保证了程序运行时，加载类时每个类在内存中仅会产生一个Class对象。在这里我不打算详细展开说明，可以简单地理解为 JVM 帮我们保证了一个类在内存中至多存在一个 Class 对象。\n```\n\n### 构造类的实例化对象\n\n通过反射构造一个类的实例方式有`2`种：\n\n- Class 对象调用`newInstance()`方法\n\n  ```\n  Class clazz = Class.forName(\"com.bean.SmallPineapple\");\n  SmallPineapple smallPineapple = (SmallPineapple) clazz.newInstance();\n  smallPineapple.getInfo();\n  // [null 的年龄是：0]\n  \n  ```\n\n  即使 SmallPineapple 已经显式定义了构造方法，通过 newInstance()  创建的实例中，所有属性值都是对应类型的`初始值`，因为 newInstance() 构造实例会**调用默认无参构造器**。\n\n  - Constructor 构造器调用`newInstance()`方法\n\n  ```java\n  Class clazz = Class.forName(\"com.bean.SmallPineapple\");\n  Constructor constructor = clazz.getConstructor(String.class, int.class);\n  constructor.setAccessible(true);\n  SmallPineapple smallPineapple2 = (SmallPineapple) constructor.newInstance(\"小菠萝\", 21);\n  smallPineapple2.getInfo();\n  // [小菠萝 的年龄是：21]\n  \n  ```\n\n  通过 getConstructor(Object... paramTypes) 方法指定获取**指定参数类型**的 Constructor， Constructor 调用 newInstance(Object... paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\n\n  通过`Class`对象调用 newInstance() 会走**默认无参构造方法**，如果想通过**显式构造方法**构造实例，需要提前从Class中调用`getConstructor()`方法获取对应的构造器，通过构造器去实例化对象。\n\n  ```\n  这些 API 是在开发当中最常遇到的，当然还有非常多重载的方法，本文由于篇幅原因，且如果每个方法都一一讲解，我们也记不住，所以用到的时候去类里面查找就已经足够了。\n  ```\n\n  ### 获取一个类的所有信息\n\n  **Class 对象中包含了该类的所有信息，在编译期我们能看到的信息就是该类的变量、方法、构造器，在运行时最常被获取的也是这些信息。**\n\n[![0S78pQ.jpg](https://s1.ax1x.com/2020/09/24/0S78pQ.jpg)](https://imgchr.com/i/0S78pQ)\n\n### 获取类中的变量（Field）\n\n- Field[] getFields()：获取类中所有被`public`修饰的所有变量\n- Field getField(String name)：根据**变量名**获取类中的一个变量，该**变量必须被public修饰**\n- Field[] getDeclaredFields()：获取类中所有的变量，但**无法获取继承下来的变量**\n- Field getDeclaredField(String name)：根据姓名获取类中的某个变量，**无法获取继承下来的变量**\n\n### 获取类中的方法（Method）\n\n- Method[] getMethods()：获取类中被`public`修饰的所有方法\n- Method getMethod(String name, Class...<?> paramTypes)：根据**名字和参数类型**获取对应方法，该方法必须被`public`修饰\n- Method[] getDeclaredMethods()：获取`所有`方法，但**无法获取继承下来的方法**\n- Method getDeclaredMethod(String name, Class...<?> paramTypes)：根据**名字和参数类型**获取对应方法，**无法获取继承下来的方法**\n\n### 获取类的构造器（Constructor）\n\n- Constuctor[] getConstructors()：获取类中所有被`public`修饰的构造器\n- Constructor getConstructor(Class...<?> paramTypes)：根据`参数类型`获取类中某个构造器，该构造器必须被`public`修饰\n- Constructor[] getDeclaredConstructors()：获取类中所有构造器\n- Constructor getDeclaredConstructor(class...<?> paramTypes)：根据`参数类型`获取对应的构造器\n\n每种功能内部以 Declared 细分为`2`类：\n\n```\n有Declared修饰的方法：可以获取该类内部包含的所有变量、方法和构造器，但是无法获取继承下来的信息\n\n无Declared修饰的方法：可以获取该类中public修饰的变量、方法和构造器，可获取继承下来的信息\n```\n\n如果想获取类中**所有的（包括继承）**变量、方法和构造器，则需要同时调用`getXXXs()`和`getDeclaredXXXs()`两个方法，用`Set`集合存储它们获得的变量、构造器和方法，以防两个方法获取到相同的东西。\n\n例如：要获取SmallPineapple获取类中**所有的变量**，代码应该是下面这样写。\n\n```\nClass clazz = Class.forName(\"com.bean.SmallPineapple\");\n// 获取 public 属性，包括继承\nField[] fields1 = clazz.getFields();\n// 获取所有属性，不包括继承\nField[] fields2 = clazz.getDeclaredFields();\n// 将所有属性汇总到 set\nSet<Field> allFields = new HashSet<>();\nallFields.addAll(Arrays.asList(fields1));\nallFields.addAll(Arrays.asList(fields2));\n```\n\n```\n不知道你有没有发现一件有趣的事情，如果父类的属性用protected修饰，利用反射是无法获取到的。\nprotected 修饰符的作用范围：只允许同一个包下或者子类访问，可以继承到子类。\ngetFields() 只能获取到本类的public属性的变量值；\ngetDeclaredFields() 只能获取到本类的所有属性，不包括继承的；无论如何都获取不到父类的 protected 属性修饰的变量，但是它的的确确存在于子类中。\n```\n\n### 获取注解\n\n**获取注解单独拧了出来，因为它并不是专属于 Class 对象的一种信息，每个变量，方法和构造器都可以被注解修饰，所以在反射中，Field，Constructor 和 Method 类对象都可以调用下面这些方法获取标注在它们之上的注解。**\n\n- Annotation[] getAnnotations()：获取该对象上的**所有注解**\n- Annotation getAnnotation(Class annotaionClass)：传入`注解类型`，获取该对象上的特定一个注解\n- Annotation[] getDeclaredAnnotations()：获取该对象上的显式标注的所有注解，无法获取`继承`下来的注解\n- Annotation getDeclaredAnnotation(Class annotationClass)：根据`注解类型`，获取该对象上的特定一个注解，无法获取`继承`下来的注解\n\n只有注解的`@Retension`标注为`RUNTIME`时，才能够通过反射获取到该注解，@Retension 有`3`种保存策略：\n\n- `SOURCE`：只在**源文件(.java)**中保存，即该注解只会保留在源文件中，**编译时编译器会忽略该注解**，例如 @Override 注解\n- `CLASS`：保存在**字节码文件(.class)**中，注解会随着编译跟随字节码文件中，但是**运行时**不会对该注解进行解析\n- `RUNTIME`：一直保存到**运行时**，**用得最多的一种保存策略**，在运行时可以获取到该注解的所有信息\n\n像下面这个例子，SmallPineapple 类继承了抽象类`Pineapple`，`getInfo()`方法上标识有 @Override 注解，且在子类中标注了`@Transient`注解，在运行时获取子类重写方法上的所有注解，只能获取到`@Transient`的信息。\n\n```\npublic abstract class Pineapple {\n    public abstract void getInfo();\n}\npublic class SmallPineapple extends Pineapple {\n    @Transient\n    @Override\n    public void getInfo() {\n        System.out.print(\"小菠萝的身高和年龄是:\" + height + \"cm ; \" + age + \"岁\");\n    }\n}\n```\n\n启动类`Bootstrap`获取 SmallPineapple 类中的 getInfo() 方法上的注解信息：\n\n```\npublic class Bootstrap {\n    /**\n     * 根据运行时传入的全类名路径判断具体的类对象\n     * @param path 类的全类名路径\n     */\n    public static void execute(String path) throws Exception {\n        Class obj = Class.forName(path);\n        Method method = obj.getMethod(\"getInfo\");\n        Annotation[] annotations = method.getAnnotations();\n        for (Annotation annotation : annotations) {\n            System.out.println(annotation.toString());\n        }\n    }\n    public static void main(String[] args) throws Exception {\n        execute(\"com.pineapple.SmallPineapple\");\n    }\n}\n// @java.beans.Transient(value=true)\n\n```\n\n### 通过反射调用方法\n\n通过反射获取到某个 Method 类对象后，可以通过调用`invoke`方法执行。\n\n- `invoke(Oject obj, Object... args)`：参数``1`指定调用该方法的**对象**，参数`2`是方法的参数列表值。\n\n如果调用的方法是**静态方法**，参数1只需要传入`null`，因为静态方法不与某个对象有关，只与某个类有关。\n\n可以像下面这种做法，通过反射实例化一个对象，然后获取`Method`方法对象，调用`invoke()`指定`SmallPineapple`的`getInfo()`方法。\n\n```\nClass clazz = Class.forName(\"com.bean.SmallPineapple\");\nConstructor constructor = clazz.getConstructor(String.class, int.class);\nconstructor.setAccessible(true);\nSmallPineapple sp = (SmallPineapple) constructor.newInstance(\"小菠萝\", 21);\nMethod method = clazz.getMethod(\"getInfo\");\nif (method != null) {\n    method.invoke(sp, null);\n}\n// [小菠萝的年龄是：21]\n\n```\n\n## 反射的应用场景\n\n反射常见的应用场景这里介绍`3`个：\n\n- Spring 实例化对象：当程序启动时，Spring 会读取配置文件`applicationContext.xml`并解析出里面所有的  标签实例化到`IOC`容器中。\n- 反射 + 工厂模式：通过`反射`消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，`反射`可以使得程序更加健壮。\n- JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的`驱动类`时用到反射加载驱动类\n\n### Spring 的 IOC 容器\n\n在 Spring 中，经常会编写一个上下文配置文件`applicationContext.xml`，里面就是关于`bean`的配置，程序启动时会读取该 xml 文件，解析出所有的 `<bean>`标签，并实例化对象放入`IOC`容器中。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"smallpineapple\" class=\"com.bean.SmallPineapple\">\n        <constructor-arg type=\"java.lang.String\" value=\"小菠萝\"/>\n        <constructor-arg type=\"int\" value=\"21\"/>\n    </bean>\n</beans>\n```\n\n在定义好上面的文件后，通过`ClassPathXmlApplicationContext`加载该配置文件，程序启动时，Spring 会将该配置文件中的所有`bean`都实例化，放入 IOC 容器中，IOC 容器本质上就是一个工厂，通过该工厂传入 \\ 标签的`id`属性获取到对应的实例。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        ApplicationContext ac =\n                new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        SmallPineapple smallPineapple = (SmallPineapple) ac.getBean(\"smallpineapple\");\n        smallPineapple.getInfo(); // [小菠萝的年龄是：21]\n    }\n}\n```\n\nSpring 在实例化对象的过程经过简化之后，可以理解为反射实例化对象的步骤：\n\n- **获取Class对象的构造器**\n- 通过构造器**调用 newInstance()** 实例化对象\n\n当然 Spring 在实例化对象时，做了非常多额外的操作，才能够让现在的开发足够的**便捷且稳定**。\n\n```\n在之后的文章中会专门写一篇文章讲解如何利用反射实现一个简易版的IOC容器，IOC容器原理很简单，只要掌握了反射的思想，了解反射的常用 API 就可以实现，我可以提供一个简单的思路：利用 HashMap 存储所有实例，key 代表 \\ 标签的 id，value 存储对应的实例，这对应了 Spring IOC容器管理的对象默认是单例的。\n```\n\n### 反射 + 抽象工厂模式\n\n传统的工厂模式，如果需要生产新的子类，**需要修改工厂类，在工厂类中增加新的分支**；\n\n```\npublic class MapFactory {\n    public Map<Object, object> produceMap(String name) {\n        if (\"HashMap\".equals(name)) {\n            return new HashMap<>();\n        } else if (\"TreeMap\".equals(name)) {\n            return new TreeMap<>();\n        } // ···\n    }\n}\n```\n\n利用反射和工厂模式相结合，在产生新的子类时，**工厂类不用修改任何东西**，可以专注于子类的实现，**当子类确定下来时，工厂也就可以生产该子类了。**\n\n反射 + 抽象工厂的**核心思想**是：\n\n- **在运行时通过参数传入不同子类的全限定名获取到不同的 Class 对象，调用 newInstance() 方法返回不同的子类。**细心的读者会发现提到了**子类**这个概念，所以反射 + 抽象工厂模式，一般会用于有**继承**或者**接口实现**关系。\n\n例如，在运行时才确定使用哪一种 `Map` 结构，我们可以利用反射传入某个具体 Map 的全限定名，实例化一个特定的子类。\n\n```\npublic class MapFactory {\n    /**\n     * @param className 类的全限定名\n     */\n    public Map<Object, Object> produceMap(String className) {\n        Class clazz = Class.forName(className);\n        Map<Object, Object> map = clazz.newInstance();\n        return map;\n    }\n}\n```\n\n`className` 可以指定为 java.util.HashMap，或者 java.util.TreeMap 等等，根据业务场景来定。\n\n### JDBC 加载数据库驱动类\n\n在导入第三方库时，JVM不会主动去加载外部导入的类，而是**等到真正使用时，才去加载需要的类**，正是如此，我们可以在获取数据库连接时传入驱动类的全限定名，交给 JVM 加载该类。\n\n```\npublic class DBConnectionUtil {\n    /** 指定数据库的驱动类 */\n    private static final String DRIVER_CLASS_NAME = \"com.mysql.jdbc.Driver\";\n    \n    public static Connection getConnection() {\n        Connection conn = null;\n        // 加载驱动类\n        Class.forName(DRIVER_CLASS_NAME);\n        // 获取数据库连接对象\n        conn = DriverManager.getConnection(\"jdbc:mysql://···\", \"root\", \"root\");\n        return conn;\n    }\n}\n```\n\n在我们开发 SpringBoot 项目时，会经常遇到这个类，但是可能习惯成自然了，就没多大在乎，我在这里给你们看看常见的`application.yml`中的数据库配置，我想你应该会恍然大悟吧。\n\n[![0SHrUf.jpg](https://s1.ax1x.com/2020/09/24/0SHrUf.jpg)](https://imgchr.com/i/0SHrUf)\n\n这里的 **driver-class-name**，和我们一开始加载的类是不是觉得很相似，这是因为**MySQL**版本不同引起的**驱动类不同**，这体现使用反射的好处：不需要修改源码，**仅加载配置文件就可以完成驱动类的替换**。\n\n```\n在之后的文章中会专门写一篇文章详细地介绍反射的应用场景，实现简单的IOC容器以及通过反射实现工厂模式的好处。\n在这里，你只需要掌握反射的基本用法和它的思想，了解它的主要使用场景\n```\n\n## 反射的优势及缺陷\n\n反射的**优点**：\n\n- **增加程序的灵活性**：面对需求变更时，可以灵活地实例化不同对象\n\n但是，有得必有失，一项技术不可能只有优点没有缺点，反射也有**两个比较隐晦的缺点**：\n\n- **破坏类的封装性**：可以强制访问 private 修饰的信息\n- **性能损耗**：反射相比直接实例化对象、调用方法、访问变量，中间需要非常多的**检查步骤和解析步骤**，JVM无法对它们优化。\n\n### 增加程序的灵活性\n\n这里不再用 SmallPineapple 举例了，我们来看一个更加`贴近开发`的例子：\n\n- 利用反射连接数据库，**涉及到数据库的数据源**。在 SpringBoot 中一切约定大于配置，想要**定制配置**时，使用`application.properties`配置文件指定数据源\n\n**角色1 - Java的设计者**：我们设计好`DataSource`接口，你们其它数据库厂商想要开发者用`你们的数据源`监控数据库，就得实现`我的这个接口`！\n\n**角色2 - 数据库厂商**：\n\n- MySQL 数据库厂商：我们提供了 **com.mysql.cj.jdbc.MysqlDataSource** 数据源，开发者可以使用它连接 MySQL。\n- 阿里巴巴厂商：我们提供了 **com.alibaba.druid.pool.DruidDataSource** 数据源，我这个数据源更牛逼，具有**页面监控**，**慢SQL日志记录**等功能，开发者快来用它监控 MySQL吧！\n- SQLServer 厂商：我们提供了 **com.microsoft.sqlserver.jdbc.SQLServerDataSource** 数据源，如果你想实用SQL Server 作为数据库，那就使用我们的这个数据源连接吧\n\n**角色3 - 开发者**：我们可以用`配置文件`指定使用`DruidDataSource`数据源\n\n```\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\n```\n\n**需求变更**：某一天，老板来跟我们说，Druid 数据源不太符合我们现在的项目了，我们使用 **MysqlDataSource** 吧，然后程序猿就会修改配置文件，重新加载配置文件，并重启项目，完成数据源的切换。\n\n```\nspring.datasource.type=com.mysql.cj.jdbc.MysqlDataSource\n```\n\n在改变连接数据库的数据源时，只需要改变配置文件即可，**无需改变任何代码**，原因是：\n\n- **Spring Boot 底层封装好了连接数据库的数据源配置，利用反射，适配各个数据源。**\n\n下面来简略的进行源码分析。我们用`ctrl+左键`点击`spring.datasource.type`进入 DataSourceProperties 类中，发现使用setType() 将**全类名转化为 Class 对象**注入到`type`成员变量当中。在连接并监控数据库时，就会使用指定的数据源操作。\n\n```\nprivate Class<? extends DataSource> type;\n\npublic void setType(Class<? extends DataSource> type) {\n    this.type = type;\n}\n```\n\n`Class`对象指定了泛型上界`DataSource`，我们去看一下各大数据源的`类图结构`。\n\n[![0SbEqI.jpg](https://s1.ax1x.com/2020/09/24/0SbEqI.jpg)](https://imgchr.com/i/0SbEqI)\n\n**上图展示了一部分数据源，当然不止这些，但是我们可以看到，无论指定使用哪一种数据源，我们都只需要与配置文件打交道，而无需更改源码，这就是反射的灵活性！**\n\n### 破坏类的封装性\n\n很明显的一个特点，反射可以获取类中被`private`修饰的变量、方法和构造器，这**违反了面向对象的封装特性**，因为被 private 修饰意味着不想对外暴露，只允许本类访问，而`setAccessable(true)`可以无视访问修饰符的限制，外界可以强制访问。\n\n还记得`单例模式`一文吗？里面讲到反射破坏饿汉式和懒汉式单例模式，所以之后用了`枚举`避免被反射KO。\n\n回到最初的起点，SmallPineapple 里有一个 weight 属性被 private 修饰符修饰，目的在于自己的体重并不想给外界知道。\n\n```\npublic class SmallPineapple {\n    public String name;\n    public int age;\n    private double weight; // 体重只有自己知道\n    \n    public SmallPineapple(String name, int age, double weight) {\n        this.name = name;\n        this.age = age;\n        this.weight = weight;\n    }\n    \n}\n```\n\n虽然 weight 属性理论上只有自己知道，但是如果经过反射，这个类就像在**裸奔**一样，在反射面前变得`一览无遗`。\n\n```\nSmallPineapple sp = new SmallPineapple(\"小菠萝\", 21, \"54.5\");\nClazz clazz = Class.forName(sp.getClass());\nField weight = clazz.getDeclaredField(\"weight\");\nweight.setAccessable(true);\nSystem.out.println(\"窥觑到小菠萝的体重是：\" + weight.get(sp));\n// 窥觑到小菠萝的体重是：54.5 kg\n```\n\n### 性能损耗\n\n**在直接 new 对象并调用对象方法和访问属性时，编译器会在编译期提前检查可访问性，如果尝试进行不正确的访问，IDE会提前提示错误，例如参数传递类型不匹配，非法访问 private 属性和方法。**\n\n```\n而在利用反射操作对象时，编译器无法提前得知对象的类型，访问是否合法，参数传递类型是否匹配。只有在程序运行时调用反射的代码时才会从头开始检查、调用、返回结果，JVM也无法对反射的代码进行优化。\n```\n\n虽然反射具有性能损耗的特点，但是我们不能一概而论，产生了使用反射就会性能下降的思想，反射的慢，需要同时调用上`100W`次才可能体现出来，在几次、几十次的调用，并不能体现反射的性能低下。所以不要一味地戴有色眼镜看反射，**在单次调用反射的过程中，性能损耗可以忽略不计。如果程序的性能要求很高，那么尽量不要使用反射。**\n\n## 反射基础篇文末总结\n\n- 反射的思想：反射就像是**一面镜子**一样，在**运行时**才看到自己是谁，可获取到自己的信息，甚至实例化对象。\n- 反射的作用：**在运行时才确定实例化对象，使程序更加健壮**，面对需求变更时，可以最大程度地做到不修改程序源码应对不同的场景，实例化不同类型的对象。\n- 反射的应用场景常见的有`3`个：Spring的 IOC 容器，反射+工厂模式 使工厂类更稳定，JDBC连接数据库时加载驱动类\n- 反射的`3`个特点：增加程序的灵活性、破坏类的封装性以及性能损耗","source":"_posts/JAVA反射.md","raw":"---\ntitle: java反射\n---\n\n## **反射的定义：**\n\n对于任意一个实体类，都能知道它的方法和属性，对于任意一个对象，都能调用它的属性和方法。\n\n**正射**：我们平常用的最多的 `new` 方式实例化对象的方式就是一种正射的体现。假如我需要实例化一个`HashMap`，代码就会是这样子。\n\n```\nMap<Integer, Integer> map = new HashMap<>();\nmap.put(1, 1);\n```\n\n某一天发现，该段程序不适合用 HashMap 存储键值对，更倾向于用`LinkedHashMap`存储。重新编写代码后变成下面这个样子。\n\n```\nMap<Integer, Integer> map = new LinkedHashMap<>();\nmap.put(1, 1);\n```\n\n假如又有一天，发现数据还是适合用 HashMap来存储，难道又要重新修改源码吗？\n\n```\n发现问题了吗？我们每次改变一种需求，都要去重新修改源码，然后对代码进行编译，打包，再到 JVM 上重启项目。这么些步骤下来，效率非常低。\n```\n\n[![0SgNcT.md.png](https://s1.ax1x.com/2020/09/24/0SgNcT.md.png)](https://imgchr.com/i/0SgNcT)\n\n对于这种**需求频繁变更但变更不大**的场景，频繁地更改源码肯定是一种不允许的操作，我们可以使用一个`开关`，判断什么时候使用哪一种数据结构。\n\n```\npublic Map<Integer, Integer> getMap(String param) {\n    Map<Integer, Integer> map = null;\n    if (param.equals(\"HashMap\")) {\n        map = new HashMap<>();\n    } else if (param.equals(\"LinkedHashMap\")) {\n        map = new LinkedHashMap<>();\n    } else if (param.equals(\"WeakHashMap\")) {\n        map = new WeakHashMap<>();\n    }\n    return map;\n}\n```\n\n通过传入参数`param`决定使用哪一种数据结构，可以在项目运行时，通过**动态传入参数**决定使用哪一个数据结构。\n\n如果某一天还想用`TreeMap`，还是避免不了修改源码，重新编译执行的弊端。这个时候，**反射**就派上用场了。\n\n在代码运行之前，我们**不确定**将来会使用哪一种数据结构，只有在程序**运行时才决定**使用哪一个数据类，而`反射`可以在**程序运行过程**中动态**获取类信息**和**调用类方法**。通过反射构造类实例，代码会演变成下面这样。\n\n```java\npublic Map<Integer, Integer> getMap(String className) {\n    Class clazz = Class.forName(className);\n    Consructor con = clazz.getConstructor();\n    return (Map<Integer, Integer>) con.newInstance();\n}\n\n```\n\n无论使用什么 Map，只要实现了`Map接口`，就可以使用`全类名路径`传入到方法中，获得对应的 Map 实例。例如java.util.HashMap / java.util.LinkedHashMap····如果要创建其它类例如`WeakHashMap`，我也**不需要修改上面这段源码**。\n\n我们来回顾一下如何从 `new` 一个对象引出使用`反射`的。\n\n- 在不使用反射时，构造对象使用 new 方式实现，这种方式在**编译期**就可以把对象的类型确定下来。\n- 如果需求发生变更，需要构造另一个对象，则需要修改源码，非常不优雅，所以我们通过使用`开关`，在程序运行时判断需要构造哪一个对象，在运行时可以**变更开关**来实例化不同的数据结构。\n- 如果还有其它扩展的类有可能被使用，就会创建出**非常多的分支**，且在编码时不知道有什么其他的类被使用到，假如日后`Map`接口下多了一个集合类是`xxxHashMap`，还得创建分支，此时引出了反射：可以在`运行时`才确定使用哪一个数据类，在切换类时，无需重新修改源码、编译程序。\n\n第一章总结：\n\n- 反射的**思想**：**在程序运行过程中确定和解析数据类的类型。**\n- 反射的**作用**：对于在`编译期`无法确定使用哪个数据类的场景，通过`反射`可以在程序运行时**构造出不同的数据类实例**。\n\n## 反射的基本使用\n\nJava 反射的主要组成部分有4个：\n\n- `Class`：任何运行在内存中的所有类都是该 Class 类的实例对象，每个 Class 类对象内部都包含了本来的**所有信息**。记着一句话，通过反射干任何事，先找 Class 准没错！\n- `Field`：描述一个类的**属性**，内部包含了该属性的所有信息，例如**数据类型，属性名，访问修饰符**······\n- `Constructor`：描述一个类的**构造方法**，内部包含了构造方法的所有信息，例如**参数类型，参数名字，访问修饰符**······\n- `Method`：描述一个类的**所有方法**（包括抽象方法），内部包含了该方法的所有信息，与`Constructor`类似，不同之处是 Method 拥有**返回值类型**信息，因为构造方法是没有返回值的。\n\n如果用到了反射，离不开这核心的`4`个类，只有去了解它们内部提供了哪些信息，有什么作用，运用它们的时候才能**易如反掌**。\n\n![0ShXAe.jpg](https://s1.ax1x.com/2020/09/24/0ShXAe.jpg)\n\n在学习反射的基本使用时，我会用一个`SmallPineapple`类作为模板进行说明，首先我们先来熟悉这个类的基本组成：**属性，构造函数和方法**\n\n```\npublic class SmallPineapple {\n    public String name;\n    public int age;\n    private double weight; // 体重只有自己知道\n    \n    public SmallPineapple() {}\n    \n    public SmallPineapple(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public void getInfo() {\n        System.out.print(\"[\"+ name + \" 的年龄是：\" + age + \"]\");\n    }\n}\n```\n\n反射中的用法有非常非常多，常见的功能有以下这几个：\n\n- 在运行时获取一个类的 **Class 对象**\n- 在运行时构造一个类的**实例化对象**\n- 在运行时获取一个类的所有信息：**变量、方法、构造器、注解**\n\n### 获取类的 Class 对象\n\n在 Java 中，每一个类都会有专属于自己的 Class 对象，当我们编写完`.java`文件后，使用`javac`编译后，就会产生一个字节码文件`.class`，在字节码文件中包含类的所有信息，如`属性`，`构造方法`，`方法`······当字节码文件被装载进虚拟机执行时，会在内存中生成 Class 对象，它包含了该类内部的所有信息，在程序运行时可以获取这些信息。\n\n获取 Class 对象的方法有`3`种：\n\n- `类名.class`：这种获取方式只有在`编译`前已经声明了该类的类型才能获取到 Class 对象\n\n```\nClass clazz = SmallPineapple.class;\n```\n\n- `实例.getClass()`：通过实例化对象获取该实例的 Class 对象\n\n```\nSmallPineapple sp = new SmallPineapple();\nClass clazz = sp.getClass();\n```\n\n- `Class.forName(className)`：通过类的**全限定名**获取该类的 Class 对象\n\n```\nClass clazz = Class.forName(\"com.bean.smallpineapple\");\n```\n\n拿到 `Class`对象就可以对它为所欲为了：剥开它的皮（获取**类信息**）、指挥它做事（调用它的**方法**），看透它的一切（获取**属性**），总之它就没有隐私了。\n\n不过在程序中，每个类的 Class 对象只有一个，也就是说你只有这一个`奴隶`。我们用上面三种方式测试，通过三种方式打印各个 `Class` 对象都是相同的。\n\n```\nClass clazz1 = Class.forName(\"com.bean.SmallPineapple\");\nClass clazz2 = SmallPineapple.class;\nSmallPineapple instance = new SmallPineapple();\nClass clazz3 = instance.getClass();\nSystem.out.println(\"Class.forName() == SmallPineapple.class:\" + (clazz1 == clazz2));\nSystem.out.println(\"Class.forName() == instance.getClass():\" + (clazz1 == clazz3));\nSystem.out.println(\"instance.getClass() == SmallPineapple.class:\" + (clazz2 == clazz3));\n```\n\n[![0S4H8s.jpg](https://s1.ax1x.com/2020/09/24/0S4H8s.jpg)](https://imgchr.com/i/0S4H8s)\n\n```\n内存中只有一个 Class 对象的原因要牵扯到 JVM 类加载机制的双亲委派模型，它保证了程序运行时，加载类时每个类在内存中仅会产生一个Class对象。在这里我不打算详细展开说明，可以简单地理解为 JVM 帮我们保证了一个类在内存中至多存在一个 Class 对象。\n```\n\n### 构造类的实例化对象\n\n通过反射构造一个类的实例方式有`2`种：\n\n- Class 对象调用`newInstance()`方法\n\n  ```\n  Class clazz = Class.forName(\"com.bean.SmallPineapple\");\n  SmallPineapple smallPineapple = (SmallPineapple) clazz.newInstance();\n  smallPineapple.getInfo();\n  // [null 的年龄是：0]\n  \n  ```\n\n  即使 SmallPineapple 已经显式定义了构造方法，通过 newInstance()  创建的实例中，所有属性值都是对应类型的`初始值`，因为 newInstance() 构造实例会**调用默认无参构造器**。\n\n  - Constructor 构造器调用`newInstance()`方法\n\n  ```java\n  Class clazz = Class.forName(\"com.bean.SmallPineapple\");\n  Constructor constructor = clazz.getConstructor(String.class, int.class);\n  constructor.setAccessible(true);\n  SmallPineapple smallPineapple2 = (SmallPineapple) constructor.newInstance(\"小菠萝\", 21);\n  smallPineapple2.getInfo();\n  // [小菠萝 的年龄是：21]\n  \n  ```\n\n  通过 getConstructor(Object... paramTypes) 方法指定获取**指定参数类型**的 Constructor， Constructor 调用 newInstance(Object... paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。\n\n  通过`Class`对象调用 newInstance() 会走**默认无参构造方法**，如果想通过**显式构造方法**构造实例，需要提前从Class中调用`getConstructor()`方法获取对应的构造器，通过构造器去实例化对象。\n\n  ```\n  这些 API 是在开发当中最常遇到的，当然还有非常多重载的方法，本文由于篇幅原因，且如果每个方法都一一讲解，我们也记不住，所以用到的时候去类里面查找就已经足够了。\n  ```\n\n  ### 获取一个类的所有信息\n\n  **Class 对象中包含了该类的所有信息，在编译期我们能看到的信息就是该类的变量、方法、构造器，在运行时最常被获取的也是这些信息。**\n\n[![0S78pQ.jpg](https://s1.ax1x.com/2020/09/24/0S78pQ.jpg)](https://imgchr.com/i/0S78pQ)\n\n### 获取类中的变量（Field）\n\n- Field[] getFields()：获取类中所有被`public`修饰的所有变量\n- Field getField(String name)：根据**变量名**获取类中的一个变量，该**变量必须被public修饰**\n- Field[] getDeclaredFields()：获取类中所有的变量，但**无法获取继承下来的变量**\n- Field getDeclaredField(String name)：根据姓名获取类中的某个变量，**无法获取继承下来的变量**\n\n### 获取类中的方法（Method）\n\n- Method[] getMethods()：获取类中被`public`修饰的所有方法\n- Method getMethod(String name, Class...<?> paramTypes)：根据**名字和参数类型**获取对应方法，该方法必须被`public`修饰\n- Method[] getDeclaredMethods()：获取`所有`方法，但**无法获取继承下来的方法**\n- Method getDeclaredMethod(String name, Class...<?> paramTypes)：根据**名字和参数类型**获取对应方法，**无法获取继承下来的方法**\n\n### 获取类的构造器（Constructor）\n\n- Constuctor[] getConstructors()：获取类中所有被`public`修饰的构造器\n- Constructor getConstructor(Class...<?> paramTypes)：根据`参数类型`获取类中某个构造器，该构造器必须被`public`修饰\n- Constructor[] getDeclaredConstructors()：获取类中所有构造器\n- Constructor getDeclaredConstructor(class...<?> paramTypes)：根据`参数类型`获取对应的构造器\n\n每种功能内部以 Declared 细分为`2`类：\n\n```\n有Declared修饰的方法：可以获取该类内部包含的所有变量、方法和构造器，但是无法获取继承下来的信息\n\n无Declared修饰的方法：可以获取该类中public修饰的变量、方法和构造器，可获取继承下来的信息\n```\n\n如果想获取类中**所有的（包括继承）**变量、方法和构造器，则需要同时调用`getXXXs()`和`getDeclaredXXXs()`两个方法，用`Set`集合存储它们获得的变量、构造器和方法，以防两个方法获取到相同的东西。\n\n例如：要获取SmallPineapple获取类中**所有的变量**，代码应该是下面这样写。\n\n```\nClass clazz = Class.forName(\"com.bean.SmallPineapple\");\n// 获取 public 属性，包括继承\nField[] fields1 = clazz.getFields();\n// 获取所有属性，不包括继承\nField[] fields2 = clazz.getDeclaredFields();\n// 将所有属性汇总到 set\nSet<Field> allFields = new HashSet<>();\nallFields.addAll(Arrays.asList(fields1));\nallFields.addAll(Arrays.asList(fields2));\n```\n\n```\n不知道你有没有发现一件有趣的事情，如果父类的属性用protected修饰，利用反射是无法获取到的。\nprotected 修饰符的作用范围：只允许同一个包下或者子类访问，可以继承到子类。\ngetFields() 只能获取到本类的public属性的变量值；\ngetDeclaredFields() 只能获取到本类的所有属性，不包括继承的；无论如何都获取不到父类的 protected 属性修饰的变量，但是它的的确确存在于子类中。\n```\n\n### 获取注解\n\n**获取注解单独拧了出来，因为它并不是专属于 Class 对象的一种信息，每个变量，方法和构造器都可以被注解修饰，所以在反射中，Field，Constructor 和 Method 类对象都可以调用下面这些方法获取标注在它们之上的注解。**\n\n- Annotation[] getAnnotations()：获取该对象上的**所有注解**\n- Annotation getAnnotation(Class annotaionClass)：传入`注解类型`，获取该对象上的特定一个注解\n- Annotation[] getDeclaredAnnotations()：获取该对象上的显式标注的所有注解，无法获取`继承`下来的注解\n- Annotation getDeclaredAnnotation(Class annotationClass)：根据`注解类型`，获取该对象上的特定一个注解，无法获取`继承`下来的注解\n\n只有注解的`@Retension`标注为`RUNTIME`时，才能够通过反射获取到该注解，@Retension 有`3`种保存策略：\n\n- `SOURCE`：只在**源文件(.java)**中保存，即该注解只会保留在源文件中，**编译时编译器会忽略该注解**，例如 @Override 注解\n- `CLASS`：保存在**字节码文件(.class)**中，注解会随着编译跟随字节码文件中，但是**运行时**不会对该注解进行解析\n- `RUNTIME`：一直保存到**运行时**，**用得最多的一种保存策略**，在运行时可以获取到该注解的所有信息\n\n像下面这个例子，SmallPineapple 类继承了抽象类`Pineapple`，`getInfo()`方法上标识有 @Override 注解，且在子类中标注了`@Transient`注解，在运行时获取子类重写方法上的所有注解，只能获取到`@Transient`的信息。\n\n```\npublic abstract class Pineapple {\n    public abstract void getInfo();\n}\npublic class SmallPineapple extends Pineapple {\n    @Transient\n    @Override\n    public void getInfo() {\n        System.out.print(\"小菠萝的身高和年龄是:\" + height + \"cm ; \" + age + \"岁\");\n    }\n}\n```\n\n启动类`Bootstrap`获取 SmallPineapple 类中的 getInfo() 方法上的注解信息：\n\n```\npublic class Bootstrap {\n    /**\n     * 根据运行时传入的全类名路径判断具体的类对象\n     * @param path 类的全类名路径\n     */\n    public static void execute(String path) throws Exception {\n        Class obj = Class.forName(path);\n        Method method = obj.getMethod(\"getInfo\");\n        Annotation[] annotations = method.getAnnotations();\n        for (Annotation annotation : annotations) {\n            System.out.println(annotation.toString());\n        }\n    }\n    public static void main(String[] args) throws Exception {\n        execute(\"com.pineapple.SmallPineapple\");\n    }\n}\n// @java.beans.Transient(value=true)\n\n```\n\n### 通过反射调用方法\n\n通过反射获取到某个 Method 类对象后，可以通过调用`invoke`方法执行。\n\n- `invoke(Oject obj, Object... args)`：参数``1`指定调用该方法的**对象**，参数`2`是方法的参数列表值。\n\n如果调用的方法是**静态方法**，参数1只需要传入`null`，因为静态方法不与某个对象有关，只与某个类有关。\n\n可以像下面这种做法，通过反射实例化一个对象，然后获取`Method`方法对象，调用`invoke()`指定`SmallPineapple`的`getInfo()`方法。\n\n```\nClass clazz = Class.forName(\"com.bean.SmallPineapple\");\nConstructor constructor = clazz.getConstructor(String.class, int.class);\nconstructor.setAccessible(true);\nSmallPineapple sp = (SmallPineapple) constructor.newInstance(\"小菠萝\", 21);\nMethod method = clazz.getMethod(\"getInfo\");\nif (method != null) {\n    method.invoke(sp, null);\n}\n// [小菠萝的年龄是：21]\n\n```\n\n## 反射的应用场景\n\n反射常见的应用场景这里介绍`3`个：\n\n- Spring 实例化对象：当程序启动时，Spring 会读取配置文件`applicationContext.xml`并解析出里面所有的  标签实例化到`IOC`容器中。\n- 反射 + 工厂模式：通过`反射`消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，`反射`可以使得程序更加健壮。\n- JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的`驱动类`时用到反射加载驱动类\n\n### Spring 的 IOC 容器\n\n在 Spring 中，经常会编写一个上下文配置文件`applicationContext.xml`，里面就是关于`bean`的配置，程序启动时会读取该 xml 文件，解析出所有的 `<bean>`标签，并实例化对象放入`IOC`容器中。\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"smallpineapple\" class=\"com.bean.SmallPineapple\">\n        <constructor-arg type=\"java.lang.String\" value=\"小菠萝\"/>\n        <constructor-arg type=\"int\" value=\"21\"/>\n    </bean>\n</beans>\n```\n\n在定义好上面的文件后，通过`ClassPathXmlApplicationContext`加载该配置文件，程序启动时，Spring 会将该配置文件中的所有`bean`都实例化，放入 IOC 容器中，IOC 容器本质上就是一个工厂，通过该工厂传入 \\ 标签的`id`属性获取到对应的实例。\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        ApplicationContext ac =\n                new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n        SmallPineapple smallPineapple = (SmallPineapple) ac.getBean(\"smallpineapple\");\n        smallPineapple.getInfo(); // [小菠萝的年龄是：21]\n    }\n}\n```\n\nSpring 在实例化对象的过程经过简化之后，可以理解为反射实例化对象的步骤：\n\n- **获取Class对象的构造器**\n- 通过构造器**调用 newInstance()** 实例化对象\n\n当然 Spring 在实例化对象时，做了非常多额外的操作，才能够让现在的开发足够的**便捷且稳定**。\n\n```\n在之后的文章中会专门写一篇文章讲解如何利用反射实现一个简易版的IOC容器，IOC容器原理很简单，只要掌握了反射的思想，了解反射的常用 API 就可以实现，我可以提供一个简单的思路：利用 HashMap 存储所有实例，key 代表 \\ 标签的 id，value 存储对应的实例，这对应了 Spring IOC容器管理的对象默认是单例的。\n```\n\n### 反射 + 抽象工厂模式\n\n传统的工厂模式，如果需要生产新的子类，**需要修改工厂类，在工厂类中增加新的分支**；\n\n```\npublic class MapFactory {\n    public Map<Object, object> produceMap(String name) {\n        if (\"HashMap\".equals(name)) {\n            return new HashMap<>();\n        } else if (\"TreeMap\".equals(name)) {\n            return new TreeMap<>();\n        } // ···\n    }\n}\n```\n\n利用反射和工厂模式相结合，在产生新的子类时，**工厂类不用修改任何东西**，可以专注于子类的实现，**当子类确定下来时，工厂也就可以生产该子类了。**\n\n反射 + 抽象工厂的**核心思想**是：\n\n- **在运行时通过参数传入不同子类的全限定名获取到不同的 Class 对象，调用 newInstance() 方法返回不同的子类。**细心的读者会发现提到了**子类**这个概念，所以反射 + 抽象工厂模式，一般会用于有**继承**或者**接口实现**关系。\n\n例如，在运行时才确定使用哪一种 `Map` 结构，我们可以利用反射传入某个具体 Map 的全限定名，实例化一个特定的子类。\n\n```\npublic class MapFactory {\n    /**\n     * @param className 类的全限定名\n     */\n    public Map<Object, Object> produceMap(String className) {\n        Class clazz = Class.forName(className);\n        Map<Object, Object> map = clazz.newInstance();\n        return map;\n    }\n}\n```\n\n`className` 可以指定为 java.util.HashMap，或者 java.util.TreeMap 等等，根据业务场景来定。\n\n### JDBC 加载数据库驱动类\n\n在导入第三方库时，JVM不会主动去加载外部导入的类，而是**等到真正使用时，才去加载需要的类**，正是如此，我们可以在获取数据库连接时传入驱动类的全限定名，交给 JVM 加载该类。\n\n```\npublic class DBConnectionUtil {\n    /** 指定数据库的驱动类 */\n    private static final String DRIVER_CLASS_NAME = \"com.mysql.jdbc.Driver\";\n    \n    public static Connection getConnection() {\n        Connection conn = null;\n        // 加载驱动类\n        Class.forName(DRIVER_CLASS_NAME);\n        // 获取数据库连接对象\n        conn = DriverManager.getConnection(\"jdbc:mysql://···\", \"root\", \"root\");\n        return conn;\n    }\n}\n```\n\n在我们开发 SpringBoot 项目时，会经常遇到这个类，但是可能习惯成自然了，就没多大在乎，我在这里给你们看看常见的`application.yml`中的数据库配置，我想你应该会恍然大悟吧。\n\n[![0SHrUf.jpg](https://s1.ax1x.com/2020/09/24/0SHrUf.jpg)](https://imgchr.com/i/0SHrUf)\n\n这里的 **driver-class-name**，和我们一开始加载的类是不是觉得很相似，这是因为**MySQL**版本不同引起的**驱动类不同**，这体现使用反射的好处：不需要修改源码，**仅加载配置文件就可以完成驱动类的替换**。\n\n```\n在之后的文章中会专门写一篇文章详细地介绍反射的应用场景，实现简单的IOC容器以及通过反射实现工厂模式的好处。\n在这里，你只需要掌握反射的基本用法和它的思想，了解它的主要使用场景\n```\n\n## 反射的优势及缺陷\n\n反射的**优点**：\n\n- **增加程序的灵活性**：面对需求变更时，可以灵活地实例化不同对象\n\n但是，有得必有失，一项技术不可能只有优点没有缺点，反射也有**两个比较隐晦的缺点**：\n\n- **破坏类的封装性**：可以强制访问 private 修饰的信息\n- **性能损耗**：反射相比直接实例化对象、调用方法、访问变量，中间需要非常多的**检查步骤和解析步骤**，JVM无法对它们优化。\n\n### 增加程序的灵活性\n\n这里不再用 SmallPineapple 举例了，我们来看一个更加`贴近开发`的例子：\n\n- 利用反射连接数据库，**涉及到数据库的数据源**。在 SpringBoot 中一切约定大于配置，想要**定制配置**时，使用`application.properties`配置文件指定数据源\n\n**角色1 - Java的设计者**：我们设计好`DataSource`接口，你们其它数据库厂商想要开发者用`你们的数据源`监控数据库，就得实现`我的这个接口`！\n\n**角色2 - 数据库厂商**：\n\n- MySQL 数据库厂商：我们提供了 **com.mysql.cj.jdbc.MysqlDataSource** 数据源，开发者可以使用它连接 MySQL。\n- 阿里巴巴厂商：我们提供了 **com.alibaba.druid.pool.DruidDataSource** 数据源，我这个数据源更牛逼，具有**页面监控**，**慢SQL日志记录**等功能，开发者快来用它监控 MySQL吧！\n- SQLServer 厂商：我们提供了 **com.microsoft.sqlserver.jdbc.SQLServerDataSource** 数据源，如果你想实用SQL Server 作为数据库，那就使用我们的这个数据源连接吧\n\n**角色3 - 开发者**：我们可以用`配置文件`指定使用`DruidDataSource`数据源\n\n```\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\n```\n\n**需求变更**：某一天，老板来跟我们说，Druid 数据源不太符合我们现在的项目了，我们使用 **MysqlDataSource** 吧，然后程序猿就会修改配置文件，重新加载配置文件，并重启项目，完成数据源的切换。\n\n```\nspring.datasource.type=com.mysql.cj.jdbc.MysqlDataSource\n```\n\n在改变连接数据库的数据源时，只需要改变配置文件即可，**无需改变任何代码**，原因是：\n\n- **Spring Boot 底层封装好了连接数据库的数据源配置，利用反射，适配各个数据源。**\n\n下面来简略的进行源码分析。我们用`ctrl+左键`点击`spring.datasource.type`进入 DataSourceProperties 类中，发现使用setType() 将**全类名转化为 Class 对象**注入到`type`成员变量当中。在连接并监控数据库时，就会使用指定的数据源操作。\n\n```\nprivate Class<? extends DataSource> type;\n\npublic void setType(Class<? extends DataSource> type) {\n    this.type = type;\n}\n```\n\n`Class`对象指定了泛型上界`DataSource`，我们去看一下各大数据源的`类图结构`。\n\n[![0SbEqI.jpg](https://s1.ax1x.com/2020/09/24/0SbEqI.jpg)](https://imgchr.com/i/0SbEqI)\n\n**上图展示了一部分数据源，当然不止这些，但是我们可以看到，无论指定使用哪一种数据源，我们都只需要与配置文件打交道，而无需更改源码，这就是反射的灵活性！**\n\n### 破坏类的封装性\n\n很明显的一个特点，反射可以获取类中被`private`修饰的变量、方法和构造器，这**违反了面向对象的封装特性**，因为被 private 修饰意味着不想对外暴露，只允许本类访问，而`setAccessable(true)`可以无视访问修饰符的限制，外界可以强制访问。\n\n还记得`单例模式`一文吗？里面讲到反射破坏饿汉式和懒汉式单例模式，所以之后用了`枚举`避免被反射KO。\n\n回到最初的起点，SmallPineapple 里有一个 weight 属性被 private 修饰符修饰，目的在于自己的体重并不想给外界知道。\n\n```\npublic class SmallPineapple {\n    public String name;\n    public int age;\n    private double weight; // 体重只有自己知道\n    \n    public SmallPineapple(String name, int age, double weight) {\n        this.name = name;\n        this.age = age;\n        this.weight = weight;\n    }\n    \n}\n```\n\n虽然 weight 属性理论上只有自己知道，但是如果经过反射，这个类就像在**裸奔**一样，在反射面前变得`一览无遗`。\n\n```\nSmallPineapple sp = new SmallPineapple(\"小菠萝\", 21, \"54.5\");\nClazz clazz = Class.forName(sp.getClass());\nField weight = clazz.getDeclaredField(\"weight\");\nweight.setAccessable(true);\nSystem.out.println(\"窥觑到小菠萝的体重是：\" + weight.get(sp));\n// 窥觑到小菠萝的体重是：54.5 kg\n```\n\n### 性能损耗\n\n**在直接 new 对象并调用对象方法和访问属性时，编译器会在编译期提前检查可访问性，如果尝试进行不正确的访问，IDE会提前提示错误，例如参数传递类型不匹配，非法访问 private 属性和方法。**\n\n```\n而在利用反射操作对象时，编译器无法提前得知对象的类型，访问是否合法，参数传递类型是否匹配。只有在程序运行时调用反射的代码时才会从头开始检查、调用、返回结果，JVM也无法对反射的代码进行优化。\n```\n\n虽然反射具有性能损耗的特点，但是我们不能一概而论，产生了使用反射就会性能下降的思想，反射的慢，需要同时调用上`100W`次才可能体现出来，在几次、几十次的调用，并不能体现反射的性能低下。所以不要一味地戴有色眼镜看反射，**在单次调用反射的过程中，性能损耗可以忽略不计。如果程序的性能要求很高，那么尽量不要使用反射。**\n\n## 反射基础篇文末总结\n\n- 反射的思想：反射就像是**一面镜子**一样，在**运行时**才看到自己是谁，可获取到自己的信息，甚至实例化对象。\n- 反射的作用：**在运行时才确定实例化对象，使程序更加健壮**，面对需求变更时，可以最大程度地做到不修改程序源码应对不同的场景，实例化不同类型的对象。\n- 反射的应用场景常见的有`3`个：Spring的 IOC 容器，反射+工厂模式 使工厂类更稳定，JDBC连接数据库时加载驱动类\n- 反射的`3`个特点：增加程序的灵活性、破坏类的封装性以及性能损耗","slug":"JAVA反射","published":1,"date":"2020-09-24T09:00:18.460Z","updated":"2020-09-24T09:43:32.933Z","_id":"ckfgmnkaj000028344ihrdv5j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"反射的定义：\"><a href=\"#反射的定义：\" class=\"headerlink\" title=\"反射的定义：\"></a><strong>反射的定义：</strong></h2><p>对于任意一个实体类，都能知道它的方法和属性，对于任意一个对象，都能调用它的属性和方法。</p>\n<p><strong>正射</strong>：我们平常用的最多的 <code>new</code> 方式实例化对象的方式就是一种正射的体现。假如我需要实例化一个<code>HashMap</code>，代码就会是这样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(1, 1);</span><br></pre></td></tr></table></figure>\n\n<p>某一天发现，该段程序不适合用 HashMap 存储键值对，更倾向于用<code>LinkedHashMap</code>存储。重新编写代码后变成下面这个样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; map &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">map.put(1, 1);</span><br></pre></td></tr></table></figure>\n\n<p>假如又有一天，发现数据还是适合用 HashMap来存储，难道又要重新修改源码吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发现问题了吗？我们每次改变一种需求，都要去重新修改源码，然后对代码进行编译，打包，再到 JVM 上重启项目。这么些步骤下来，效率非常低。</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/0SgNcT\"><img src=\"https://s1.ax1x.com/2020/09/24/0SgNcT.md.png\" alt=\"0SgNcT.md.png\"></a></p>\n<p>对于这种<strong>需求频繁变更但变更不大</strong>的场景，频繁地更改源码肯定是一种不允许的操作，我们可以使用一个<code>开关</code>，判断什么时候使用哪一种数据结构。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Map&lt;Integer, Integer&gt; getMap(String param) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map &#x3D; null;</span><br><span class=\"line\">    if (param.equals(&quot;HashMap&quot;)) &#123;</span><br><span class=\"line\">        map &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125; else if (param.equals(&quot;LinkedHashMap&quot;)) &#123;</span><br><span class=\"line\">        map &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125; else if (param.equals(&quot;WeakHashMap&quot;)) &#123;</span><br><span class=\"line\">        map &#x3D; new WeakHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过传入参数<code>param</code>决定使用哪一种数据结构，可以在项目运行时，通过<strong>动态传入参数</strong>决定使用哪一个数据结构。</p>\n<p>如果某一天还想用<code>TreeMap</code>，还是避免不了修改源码，重新编译执行的弊端。这个时候，<strong>反射</strong>就派上用场了。</p>\n<p>在代码运行之前，我们<strong>不确定</strong>将来会使用哪一种数据结构，只有在程序<strong>运行时才决定</strong>使用哪一个数据类，而<code>反射</code>可以在<strong>程序运行过程</strong>中动态<strong>获取类信息</strong>和<strong>调用类方法</strong>。通过反射构造类实例，代码会演变成下面这样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer, Integer&gt; <span class=\"title\">getMap</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">    Class clazz = Class.forName(className);</span><br><span class=\"line\">    Consructor con = clazz.getConstructor();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Map&lt;Integer, Integer&gt;) con.newInstance();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>无论使用什么 Map，只要实现了<code>Map接口</code>，就可以使用<code>全类名路径</code>传入到方法中，获得对应的 Map 实例。例如java.util.HashMap / java.util.LinkedHashMap····如果要创建其它类例如<code>WeakHashMap</code>，我也<strong>不需要修改上面这段源码</strong>。</p>\n<p>我们来回顾一下如何从 <code>new</code> 一个对象引出使用<code>反射</code>的。</p>\n<ul>\n<li>在不使用反射时，构造对象使用 new 方式实现，这种方式在<strong>编译期</strong>就可以把对象的类型确定下来。</li>\n<li>如果需求发生变更，需要构造另一个对象，则需要修改源码，非常不优雅，所以我们通过使用<code>开关</code>，在程序运行时判断需要构造哪一个对象，在运行时可以<strong>变更开关</strong>来实例化不同的数据结构。</li>\n<li>如果还有其它扩展的类有可能被使用，就会创建出<strong>非常多的分支</strong>，且在编码时不知道有什么其他的类被使用到，假如日后<code>Map</code>接口下多了一个集合类是<code>xxxHashMap</code>，还得创建分支，此时引出了反射：可以在<code>运行时</code>才确定使用哪一个数据类，在切换类时，无需重新修改源码、编译程序。</li>\n</ul>\n<p>第一章总结：</p>\n<ul>\n<li>反射的<strong>思想</strong>：<strong>在程序运行过程中确定和解析数据类的类型。</strong></li>\n<li>反射的<strong>作用</strong>：对于在<code>编译期</code>无法确定使用哪个数据类的场景，通过<code>反射</code>可以在程序运行时<strong>构造出不同的数据类实例</strong>。</li>\n</ul>\n<h2 id=\"反射的基本使用\"><a href=\"#反射的基本使用\" class=\"headerlink\" title=\"反射的基本使用\"></a>反射的基本使用</h2><p>Java 反射的主要组成部分有4个：</p>\n<ul>\n<li><code>Class</code>：任何运行在内存中的所有类都是该 Class 类的实例对象，每个 Class 类对象内部都包含了本来的<strong>所有信息</strong>。记着一句话，通过反射干任何事，先找 Class 准没错！</li>\n<li><code>Field</code>：描述一个类的<strong>属性</strong>，内部包含了该属性的所有信息，例如<strong>数据类型，属性名，访问修饰符</strong>······</li>\n<li><code>Constructor</code>：描述一个类的<strong>构造方法</strong>，内部包含了构造方法的所有信息，例如<strong>参数类型，参数名字，访问修饰符</strong>······</li>\n<li><code>Method</code>：描述一个类的<strong>所有方法</strong>（包括抽象方法），内部包含了该方法的所有信息，与<code>Constructor</code>类似，不同之处是 Method 拥有<strong>返回值类型</strong>信息，因为构造方法是没有返回值的。</li>\n</ul>\n<p>如果用到了反射，离不开这核心的<code>4</code>个类，只有去了解它们内部提供了哪些信息，有什么作用，运用它们的时候才能<strong>易如反掌</strong>。</p>\n<p><img src=\"https://s1.ax1x.com/2020/09/24/0ShXAe.jpg\" alt=\"0ShXAe.jpg\"></p>\n<p>在学习反射的基本使用时，我会用一个<code>SmallPineapple</code>类作为模板进行说明，首先我们先来熟悉这个类的基本组成：<strong>属性，构造函数和方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SmallPineapple &#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public int age;</span><br><span class=\"line\">    private double weight; &#x2F;&#x2F; 体重只有自己知道</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SmallPineapple() &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SmallPineapple(String name, int age) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.age &#x3D; age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void getInfo() &#123;</span><br><span class=\"line\">        System.out.print(&quot;[&quot;+ name + &quot; 的年龄是：&quot; + age + &quot;]&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反射中的用法有非常非常多，常见的功能有以下这几个：</p>\n<ul>\n<li>在运行时获取一个类的 <strong>Class 对象</strong></li>\n<li>在运行时构造一个类的<strong>实例化对象</strong></li>\n<li>在运行时获取一个类的所有信息：<strong>变量、方法、构造器、注解</strong></li>\n</ul>\n<h3 id=\"获取类的-Class-对象\"><a href=\"#获取类的-Class-对象\" class=\"headerlink\" title=\"获取类的 Class 对象\"></a>获取类的 Class 对象</h3><p>在 Java 中，每一个类都会有专属于自己的 Class 对象，当我们编写完<code>.java</code>文件后，使用<code>javac</code>编译后，就会产生一个字节码文件<code>.class</code>，在字节码文件中包含类的所有信息，如<code>属性</code>，<code>构造方法</code>，<code>方法</code>······当字节码文件被装载进虚拟机执行时，会在内存中生成 Class 对象，它包含了该类内部的所有信息，在程序运行时可以获取这些信息。</p>\n<p>获取 Class 对象的方法有<code>3</code>种：</p>\n<ul>\n<li><code>类名.class</code>：这种获取方式只有在<code>编译</code>前已经声明了该类的类型才能获取到 Class 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; SmallPineapple.class;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>实例.getClass()</code>：通过实例化对象获取该实例的 Class 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SmallPineapple sp &#x3D; new SmallPineapple();</span><br><span class=\"line\">Class clazz &#x3D; sp.getClass();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Class.forName(className)</code>：通过类的<strong>全限定名</strong>获取该类的 Class 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.smallpineapple&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>拿到 <code>Class</code>对象就可以对它为所欲为了：剥开它的皮（获取<strong>类信息</strong>）、指挥它做事（调用它的<strong>方法</strong>），看透它的一切（获取<strong>属性</strong>），总之它就没有隐私了。</p>\n<p>不过在程序中，每个类的 Class 对象只有一个，也就是说你只有这一个<code>奴隶</code>。我们用上面三种方式测试，通过三种方式打印各个 <code>Class</code> 对象都是相同的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz1 &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">Class clazz2 &#x3D; SmallPineapple.class;</span><br><span class=\"line\">SmallPineapple instance &#x3D; new SmallPineapple();</span><br><span class=\"line\">Class clazz3 &#x3D; instance.getClass();</span><br><span class=\"line\">System.out.println(&quot;Class.forName() &#x3D;&#x3D; SmallPineapple.class:&quot; + (clazz1 &#x3D;&#x3D; clazz2));</span><br><span class=\"line\">System.out.println(&quot;Class.forName() &#x3D;&#x3D; instance.getClass():&quot; + (clazz1 &#x3D;&#x3D; clazz3));</span><br><span class=\"line\">System.out.println(&quot;instance.getClass() &#x3D;&#x3D; SmallPineapple.class:&quot; + (clazz2 &#x3D;&#x3D; clazz3));</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/0S4H8s\"><img src=\"https://s1.ax1x.com/2020/09/24/0S4H8s.jpg\" alt=\"0S4H8s.jpg\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存中只有一个 Class 对象的原因要牵扯到 JVM 类加载机制的双亲委派模型，它保证了程序运行时，加载类时每个类在内存中仅会产生一个Class对象。在这里我不打算详细展开说明，可以简单地理解为 JVM 帮我们保证了一个类在内存中至多存在一个 Class 对象。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造类的实例化对象\"><a href=\"#构造类的实例化对象\" class=\"headerlink\" title=\"构造类的实例化对象\"></a>构造类的实例化对象</h3><p>通过反射构造一个类的实例方式有<code>2</code>种：</p>\n<ul>\n<li><p>Class 对象调用<code>newInstance()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">SmallPineapple smallPineapple &#x3D; (SmallPineapple) clazz.newInstance();</span><br><span class=\"line\">smallPineapple.getInfo();</span><br><span class=\"line\">&#x2F;&#x2F; [null 的年龄是：0]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>即使 SmallPineapple 已经显式定义了构造方法，通过 newInstance()  创建的实例中，所有属性值都是对应类型的<code>初始值</code>，因为 newInstance() 构造实例会<strong>调用默认无参构造器</strong>。</p>\n<ul>\n<li>Constructor 构造器调用<code>newInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz = Class.forName(<span class=\"string\">&quot;com.bean.SmallPineapple&quot;</span>);</span><br><span class=\"line\">Constructor constructor = clazz.getConstructor(String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">SmallPineapple smallPineapple2 = (SmallPineapple) constructor.newInstance(<span class=\"string\">&quot;小菠萝&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">smallPineapple2.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// [小菠萝 的年龄是：21]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 getConstructor(Object… paramTypes) 方法指定获取<strong>指定参数类型</strong>的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。</p>\n<p>通过<code>Class</code>对象调用 newInstance() 会走<strong>默认无参构造方法</strong>，如果想通过<strong>显式构造方法</strong>构造实例，需要提前从Class中调用<code>getConstructor()</code>方法获取对应的构造器，通过构造器去实例化对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些 API 是在开发当中最常遇到的，当然还有非常多重载的方法，本文由于篇幅原因，且如果每个方法都一一讲解，我们也记不住，所以用到的时候去类里面查找就已经足够了。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取一个类的所有信息\"><a href=\"#获取一个类的所有信息\" class=\"headerlink\" title=\"获取一个类的所有信息\"></a>获取一个类的所有信息</h3><p><strong>Class 对象中包含了该类的所有信息，在编译期我们能看到的信息就是该类的变量、方法、构造器，在运行时最常被获取的也是这些信息。</strong></p>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/0S78pQ\"><img src=\"https://s1.ax1x.com/2020/09/24/0S78pQ.jpg\" alt=\"0S78pQ.jpg\"></a></p>\n<h3 id=\"获取类中的变量（Field）\"><a href=\"#获取类中的变量（Field）\" class=\"headerlink\" title=\"获取类中的变量（Field）\"></a>获取类中的变量（Field）</h3><ul>\n<li>Field[] getFields()：获取类中所有被<code>public</code>修饰的所有变量</li>\n<li>Field getField(String name)：根据<strong>变量名</strong>获取类中的一个变量，该<strong>变量必须被public修饰</strong></li>\n<li>Field[] getDeclaredFields()：获取类中所有的变量，但<strong>无法获取继承下来的变量</strong></li>\n<li>Field getDeclaredField(String name)：根据姓名获取类中的某个变量，<strong>无法获取继承下来的变量</strong></li>\n</ul>\n<h3 id=\"获取类中的方法（Method）\"><a href=\"#获取类中的方法（Method）\" class=\"headerlink\" title=\"获取类中的方法（Method）\"></a>获取类中的方法（Method）</h3><ul>\n<li>Method[] getMethods()：获取类中被<code>public</code>修饰的所有方法</li>\n<li>Method getMethod(String name, Class…&lt;?&gt; paramTypes)：根据<strong>名字和参数类型</strong>获取对应方法，该方法必须被<code>public</code>修饰</li>\n<li>Method[] getDeclaredMethods()：获取<code>所有</code>方法，但<strong>无法获取继承下来的方法</strong></li>\n<li>Method getDeclaredMethod(String name, Class…&lt;?&gt; paramTypes)：根据<strong>名字和参数类型</strong>获取对应方法，<strong>无法获取继承下来的方法</strong></li>\n</ul>\n<h3 id=\"获取类的构造器（Constructor）\"><a href=\"#获取类的构造器（Constructor）\" class=\"headerlink\" title=\"获取类的构造器（Constructor）\"></a>获取类的构造器（Constructor）</h3><ul>\n<li>Constuctor[] getConstructors()：获取类中所有被<code>public</code>修饰的构造器</li>\n<li>Constructor getConstructor(Class…&lt;?&gt; paramTypes)：根据<code>参数类型</code>获取类中某个构造器，该构造器必须被<code>public</code>修饰</li>\n<li>Constructor[] getDeclaredConstructors()：获取类中所有构造器</li>\n<li>Constructor getDeclaredConstructor(class…&lt;?&gt; paramTypes)：根据<code>参数类型</code>获取对应的构造器</li>\n</ul>\n<p>每种功能内部以 Declared 细分为<code>2</code>类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有Declared修饰的方法：可以获取该类内部包含的所有变量、方法和构造器，但是无法获取继承下来的信息</span><br><span class=\"line\"></span><br><span class=\"line\">无Declared修饰的方法：可以获取该类中public修饰的变量、方法和构造器，可获取继承下来的信息</span><br></pre></td></tr></table></figure>\n\n<p>如果想获取类中<strong>所有的（包括继承）</strong>变量、方法和构造器，则需要同时调用<code>getXXXs()</code>和<code>getDeclaredXXXs()</code>两个方法，用<code>Set</code>集合存储它们获得的变量、构造器和方法，以防两个方法获取到相同的东西。</p>\n<p>例如：要获取SmallPineapple获取类中<strong>所有的变量</strong>，代码应该是下面这样写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; 获取 public 属性，包括继承</span><br><span class=\"line\">Field[] fields1 &#x3D; clazz.getFields();</span><br><span class=\"line\">&#x2F;&#x2F; 获取所有属性，不包括继承</span><br><span class=\"line\">Field[] fields2 &#x3D; clazz.getDeclaredFields();</span><br><span class=\"line\">&#x2F;&#x2F; 将所有属性汇总到 set</span><br><span class=\"line\">Set&lt;Field&gt; allFields &#x3D; new HashSet&lt;&gt;();</span><br><span class=\"line\">allFields.addAll(Arrays.asList(fields1));</span><br><span class=\"line\">allFields.addAll(Arrays.asList(fields2));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不知道你有没有发现一件有趣的事情，如果父类的属性用protected修饰，利用反射是无法获取到的。</span><br><span class=\"line\">protected 修饰符的作用范围：只允许同一个包下或者子类访问，可以继承到子类。</span><br><span class=\"line\">getFields() 只能获取到本类的public属性的变量值；</span><br><span class=\"line\">getDeclaredFields() 只能获取到本类的所有属性，不包括继承的；无论如何都获取不到父类的 protected 属性修饰的变量，但是它的的确确存在于子类中。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取注解\"><a href=\"#获取注解\" class=\"headerlink\" title=\"获取注解\"></a>获取注解</h3><p><strong>获取注解单独拧了出来，因为它并不是专属于 Class 对象的一种信息，每个变量，方法和构造器都可以被注解修饰，所以在反射中，Field，Constructor 和 Method 类对象都可以调用下面这些方法获取标注在它们之上的注解。</strong></p>\n<ul>\n<li>Annotation[] getAnnotations()：获取该对象上的<strong>所有注解</strong></li>\n<li>Annotation getAnnotation(Class annotaionClass)：传入<code>注解类型</code>，获取该对象上的特定一个注解</li>\n<li>Annotation[] getDeclaredAnnotations()：获取该对象上的显式标注的所有注解，无法获取<code>继承</code>下来的注解</li>\n<li>Annotation getDeclaredAnnotation(Class annotationClass)：根据<code>注解类型</code>，获取该对象上的特定一个注解，无法获取<code>继承</code>下来的注解</li>\n</ul>\n<p>只有注解的<code>@Retension</code>标注为<code>RUNTIME</code>时，才能够通过反射获取到该注解，@Retension 有<code>3</code>种保存策略：</p>\n<ul>\n<li><code>SOURCE</code>：只在<strong>源文件(.java)**中保存，即该注解只会保留在源文件中，</strong>编译时编译器会忽略该注解**，例如 @Override 注解</li>\n<li><code>CLASS</code>：保存在<strong>字节码文件(.class)**中，注解会随着编译跟随字节码文件中，但是</strong>运行时**不会对该注解进行解析</li>\n<li><code>RUNTIME</code>：一直保存到<strong>运行时</strong>，<strong>用得最多的一种保存策略</strong>，在运行时可以获取到该注解的所有信息</li>\n</ul>\n<p>像下面这个例子，SmallPineapple 类继承了抽象类<code>Pineapple</code>，<code>getInfo()</code>方法上标识有 @Override 注解，且在子类中标注了<code>@Transient</code>注解，在运行时获取子类重写方法上的所有注解，只能获取到<code>@Transient</code>的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Pineapple &#123;</span><br><span class=\"line\">    public abstract void getInfo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class SmallPineapple extends Pineapple &#123;</span><br><span class=\"line\">    @Transient</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void getInfo() &#123;</span><br><span class=\"line\">        System.out.print(&quot;小菠萝的身高和年龄是:&quot; + height + &quot;cm ; &quot; + age + &quot;岁&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类<code>Bootstrap</code>获取 SmallPineapple 类中的 getInfo() 方法上的注解信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bootstrap &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 根据运行时传入的全类名路径判断具体的类对象</span><br><span class=\"line\">     * @param path 类的全类名路径</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static void execute(String path) throws Exception &#123;</span><br><span class=\"line\">        Class obj &#x3D; Class.forName(path);</span><br><span class=\"line\">        Method method &#x3D; obj.getMethod(&quot;getInfo&quot;);</span><br><span class=\"line\">        Annotation[] annotations &#x3D; method.getAnnotations();</span><br><span class=\"line\">        for (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">            System.out.println(annotation.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        execute(&quot;com.pineapple.SmallPineapple&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; @java.beans.Transient(value&#x3D;true)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射调用方法\"><a href=\"#通过反射调用方法\" class=\"headerlink\" title=\"通过反射调用方法\"></a>通过反射调用方法</h3><p>通过反射获取到某个 Method 类对象后，可以通过调用<code>invoke</code>方法执行。</p>\n<ul>\n<li><code>invoke(Oject obj, Object... args)</code>：参数``1<code>指定调用该方法的**对象**，参数</code>2`是方法的参数列表值。</li>\n</ul>\n<p>如果调用的方法是<strong>静态方法</strong>，参数1只需要传入<code>null</code>，因为静态方法不与某个对象有关，只与某个类有关。</p>\n<p>可以像下面这种做法，通过反射实例化一个对象，然后获取<code>Method</code>方法对象，调用<code>invoke()</code>指定<code>SmallPineapple</code>的<code>getInfo()</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">Constructor constructor &#x3D; clazz.getConstructor(String.class, int.class);</span><br><span class=\"line\">constructor.setAccessible(true);</span><br><span class=\"line\">SmallPineapple sp &#x3D; (SmallPineapple) constructor.newInstance(&quot;小菠萝&quot;, 21);</span><br><span class=\"line\">Method method &#x3D; clazz.getMethod(&quot;getInfo&quot;);</span><br><span class=\"line\">if (method !&#x3D; null) &#123;</span><br><span class=\"line\">    method.invoke(sp, null);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; [小菠萝的年龄是：21]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反射的应用场景\"><a href=\"#反射的应用场景\" class=\"headerlink\" title=\"反射的应用场景\"></a>反射的应用场景</h2><p>反射常见的应用场景这里介绍<code>3</code>个：</p>\n<ul>\n<li>Spring 实例化对象：当程序启动时，Spring 会读取配置文件<code>applicationContext.xml</code>并解析出里面所有的  标签实例化到<code>IOC</code>容器中。</li>\n<li>反射 + 工厂模式：通过<code>反射</code>消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，<code>反射</code>可以使得程序更加健壮。</li>\n<li>JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的<code>驱动类</code>时用到反射加载驱动类</li>\n</ul>\n<h3 id=\"Spring-的-IOC-容器\"><a href=\"#Spring-的-IOC-容器\" class=\"headerlink\" title=\"Spring 的 IOC 容器\"></a>Spring 的 IOC 容器</h3><p>在 Spring 中，经常会编写一个上下文配置文件<code>applicationContext.xml</code>，里面就是关于<code>bean</code>的配置，程序启动时会读取该 xml 文件，解析出所有的 <code>&lt;bean&gt;</code>标签，并实例化对象放入<code>IOC</code>容器中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class=\"line\">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;bean id&#x3D;&quot;smallpineapple&quot; class&#x3D;&quot;com.bean.SmallPineapple&quot;&gt;</span><br><span class=\"line\">        &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot;小菠萝&quot;&#x2F;&gt;</span><br><span class=\"line\">        &lt;constructor-arg type&#x3D;&quot;int&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;bean&gt;</span><br><span class=\"line\">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在定义好上面的文件后，通过<code>ClassPathXmlApplicationContext</code>加载该配置文件，程序启动时，Spring 会将该配置文件中的所有<code>bean</code>都实例化，放入 IOC 容器中，IOC 容器本质上就是一个工厂，通过该工厂传入 \\ 标签的<code>id</code>属性获取到对应的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        SmallPineapple smallPineapple = (SmallPineapple) ac.getBean(<span class=\"string\">&quot;smallpineapple&quot;</span>);</span><br><span class=\"line\">        smallPineapple.getInfo(); <span class=\"comment\">// [小菠萝的年龄是：21]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring 在实例化对象的过程经过简化之后，可以理解为反射实例化对象的步骤：</p>\n<ul>\n<li><strong>获取Class对象的构造器</strong></li>\n<li>通过构造器<strong>调用 newInstance()</strong> 实例化对象</li>\n</ul>\n<p>当然 Spring 在实例化对象时，做了非常多额外的操作，才能够让现在的开发足够的<strong>便捷且稳定</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在之后的文章中会专门写一篇文章讲解如何利用反射实现一个简易版的IOC容器，IOC容器原理很简单，只要掌握了反射的思想，了解反射的常用 API 就可以实现，我可以提供一个简单的思路：利用 HashMap 存储所有实例，key 代表 \\ 标签的 id，value 存储对应的实例，这对应了 Spring IOC容器管理的对象默认是单例的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射-抽象工厂模式\"><a href=\"#反射-抽象工厂模式\" class=\"headerlink\" title=\"反射 + 抽象工厂模式\"></a>反射 + 抽象工厂模式</h3><p>传统的工厂模式，如果需要生产新的子类，<strong>需要修改工厂类，在工厂类中增加新的分支</strong>；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MapFactory &#123;</span><br><span class=\"line\">    public Map&lt;Object, object&gt; produceMap(String name) &#123;</span><br><span class=\"line\">        if (&quot;HashMap&quot;.equals(name)) &#123;</span><br><span class=\"line\">            return new HashMap&lt;&gt;();</span><br><span class=\"line\">        &#125; else if (&quot;TreeMap&quot;.equals(name)) &#123;</span><br><span class=\"line\">            return new TreeMap&lt;&gt;();</span><br><span class=\"line\">        &#125; &#x2F;&#x2F; ···</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用反射和工厂模式相结合，在产生新的子类时，<strong>工厂类不用修改任何东西</strong>，可以专注于子类的实现，<strong>当子类确定下来时，工厂也就可以生产该子类了。</strong></p>\n<p>反射 + 抽象工厂的<strong>核心思想</strong>是：</p>\n<ul>\n<li><strong>在运行时通过参数传入不同子类的全限定名获取到不同的 Class 对象，调用 newInstance() 方法返回不同的子类。</strong>细心的读者会发现提到了<strong>子类</strong>这个概念，所以反射 + 抽象工厂模式，一般会用于有<strong>继承</strong>或者<strong>接口实现</strong>关系。</li>\n</ul>\n<p>例如，在运行时才确定使用哪一种 <code>Map</code> 结构，我们可以利用反射传入某个具体 Map 的全限定名，实例化一个特定的子类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MapFactory &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * @param className 类的全限定名</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public Map&lt;Object, Object&gt; produceMap(String className) &#123;</span><br><span class=\"line\">        Class clazz &#x3D; Class.forName(className);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; map &#x3D; clazz.newInstance();</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>className</code> 可以指定为 java.util.HashMap，或者 java.util.TreeMap 等等，根据业务场景来定。</p>\n<h3 id=\"JDBC-加载数据库驱动类\"><a href=\"#JDBC-加载数据库驱动类\" class=\"headerlink\" title=\"JDBC 加载数据库驱动类\"></a>JDBC 加载数据库驱动类</h3><p>在导入第三方库时，JVM不会主动去加载外部导入的类，而是<strong>等到真正使用时，才去加载需要的类</strong>，正是如此，我们可以在获取数据库连接时传入驱动类的全限定名，交给 JVM 加载该类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DBConnectionUtil &#123;</span><br><span class=\"line\">    &#x2F;** 指定数据库的驱动类 *&#x2F;</span><br><span class=\"line\">    private static final String DRIVER_CLASS_NAME &#x3D; &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static Connection getConnection() &#123;</span><br><span class=\"line\">        Connection conn &#x3D; null;</span><br><span class=\"line\">        &#x2F;&#x2F; 加载驱动类</span><br><span class=\"line\">        Class.forName(DRIVER_CLASS_NAME);</span><br><span class=\"line\">        &#x2F;&#x2F; 获取数据库连接对象</span><br><span class=\"line\">        conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;···&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class=\"line\">        return conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我们开发 SpringBoot 项目时，会经常遇到这个类，但是可能习惯成自然了，就没多大在乎，我在这里给你们看看常见的<code>application.yml</code>中的数据库配置，我想你应该会恍然大悟吧。</p>\n<p><a href=\"https://imgchr.com/i/0SHrUf\"><img src=\"https://s1.ax1x.com/2020/09/24/0SHrUf.jpg\" alt=\"0SHrUf.jpg\"></a></p>\n<p>这里的 <strong>driver-class-name</strong>，和我们一开始加载的类是不是觉得很相似，这是因为<strong>MySQL</strong>版本不同引起的<strong>驱动类不同</strong>，这体现使用反射的好处：不需要修改源码，<strong>仅加载配置文件就可以完成驱动类的替换</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在之后的文章中会专门写一篇文章详细地介绍反射的应用场景，实现简单的IOC容器以及通过反射实现工厂模式的好处。</span><br><span class=\"line\">在这里，你只需要掌握反射的基本用法和它的思想，了解它的主要使用场景</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反射的优势及缺陷\"><a href=\"#反射的优势及缺陷\" class=\"headerlink\" title=\"反射的优势及缺陷\"></a>反射的优势及缺陷</h2><p>反射的<strong>优点</strong>：</p>\n<ul>\n<li><strong>增加程序的灵活性</strong>：面对需求变更时，可以灵活地实例化不同对象</li>\n</ul>\n<p>但是，有得必有失，一项技术不可能只有优点没有缺点，反射也有<strong>两个比较隐晦的缺点</strong>：</p>\n<ul>\n<li><strong>破坏类的封装性</strong>：可以强制访问 private 修饰的信息</li>\n<li><strong>性能损耗</strong>：反射相比直接实例化对象、调用方法、访问变量，中间需要非常多的<strong>检查步骤和解析步骤</strong>，JVM无法对它们优化。</li>\n</ul>\n<h3 id=\"增加程序的灵活性\"><a href=\"#增加程序的灵活性\" class=\"headerlink\" title=\"增加程序的灵活性\"></a>增加程序的灵活性</h3><p>这里不再用 SmallPineapple 举例了，我们来看一个更加<code>贴近开发</code>的例子：</p>\n<ul>\n<li>利用反射连接数据库，<strong>涉及到数据库的数据源</strong>。在 SpringBoot 中一切约定大于配置，想要<strong>定制配置</strong>时，使用<code>application.properties</code>配置文件指定数据源</li>\n</ul>\n<p><strong>角色1 - Java的设计者</strong>：我们设计好<code>DataSource</code>接口，你们其它数据库厂商想要开发者用<code>你们的数据源</code>监控数据库，就得实现<code>我的这个接口</code>！</p>\n<p><strong>角色2 - 数据库厂商</strong>：</p>\n<ul>\n<li>MySQL 数据库厂商：我们提供了 <strong>com.mysql.cj.jdbc.MysqlDataSource</strong> 数据源，开发者可以使用它连接 MySQL。</li>\n<li>阿里巴巴厂商：我们提供了 <strong>com.alibaba.druid.pool.DruidDataSource</strong> 数据源，我这个数据源更牛逼，具有<strong>页面监控</strong>，<strong>慢SQL日志记录</strong>等功能，开发者快来用它监控 MySQL吧！</li>\n<li>SQLServer 厂商：我们提供了 <strong>com.microsoft.sqlserver.jdbc.SQLServerDataSource</strong> 数据源，如果你想实用SQL Server 作为数据库，那就使用我们的这个数据源连接吧</li>\n</ul>\n<p><strong>角色3 - 开发者</strong>：我们可以用<code>配置文件</code>指定使用<code>DruidDataSource</code>数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure>\n\n<p><strong>需求变更</strong>：某一天，老板来跟我们说，Druid 数据源不太符合我们现在的项目了，我们使用 <strong>MysqlDataSource</strong> 吧，然后程序猿就会修改配置文件，重新加载配置文件，并重启项目，完成数据源的切换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.type&#x3D;com.mysql.cj.jdbc.MysqlDataSource</span><br></pre></td></tr></table></figure>\n\n<p>在改变连接数据库的数据源时，只需要改变配置文件即可，<strong>无需改变任何代码</strong>，原因是：</p>\n<ul>\n<li><strong>Spring Boot 底层封装好了连接数据库的数据源配置，利用反射，适配各个数据源。</strong></li>\n</ul>\n<p>下面来简略的进行源码分析。我们用<code>ctrl+左键</code>点击<code>spring.datasource.type</code>进入 DataSourceProperties 类中，发现使用setType() 将<strong>全类名转化为 Class 对象</strong>注入到<code>type</code>成员变量当中。在连接并监控数据库时，就会使用指定的数据源操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Class&lt;? extends DataSource&gt; type;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setType(Class&lt;? extends DataSource&gt; type) &#123;</span><br><span class=\"line\">    this.type &#x3D; type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Class</code>对象指定了泛型上界<code>DataSource</code>，我们去看一下各大数据源的<code>类图结构</code>。</p>\n<p><a href=\"https://imgchr.com/i/0SbEqI\"><img src=\"https://s1.ax1x.com/2020/09/24/0SbEqI.jpg\" alt=\"0SbEqI.jpg\"></a></p>\n<p><strong>上图展示了一部分数据源，当然不止这些，但是我们可以看到，无论指定使用哪一种数据源，我们都只需要与配置文件打交道，而无需更改源码，这就是反射的灵活性！</strong></p>\n<h3 id=\"破坏类的封装性\"><a href=\"#破坏类的封装性\" class=\"headerlink\" title=\"破坏类的封装性\"></a>破坏类的封装性</h3><p>很明显的一个特点，反射可以获取类中被<code>private</code>修饰的变量、方法和构造器，这<strong>违反了面向对象的封装特性</strong>，因为被 private 修饰意味着不想对外暴露，只允许本类访问，而<code>setAccessable(true)</code>可以无视访问修饰符的限制，外界可以强制访问。</p>\n<p>还记得<code>单例模式</code>一文吗？里面讲到反射破坏饿汉式和懒汉式单例模式，所以之后用了<code>枚举</code>避免被反射KO。</p>\n<p>回到最初的起点，SmallPineapple 里有一个 weight 属性被 private 修饰符修饰，目的在于自己的体重并不想给外界知道。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SmallPineapple &#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public int age;</span><br><span class=\"line\">    private double weight; &#x2F;&#x2F; 体重只有自己知道</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SmallPineapple(String name, int age, double weight) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.age &#x3D; age;</span><br><span class=\"line\">        this.weight &#x3D; weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然 weight 属性理论上只有自己知道，但是如果经过反射，这个类就像在<strong>裸奔</strong>一样，在反射面前变得<code>一览无遗</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SmallPineapple sp &#x3D; new SmallPineapple(&quot;小菠萝&quot;, 21, &quot;54.5&quot;);</span><br><span class=\"line\">Clazz clazz &#x3D; Class.forName(sp.getClass());</span><br><span class=\"line\">Field weight &#x3D; clazz.getDeclaredField(&quot;weight&quot;);</span><br><span class=\"line\">weight.setAccessable(true);</span><br><span class=\"line\">System.out.println(&quot;窥觑到小菠萝的体重是：&quot; + weight.get(sp));</span><br><span class=\"line\">&#x2F;&#x2F; 窥觑到小菠萝的体重是：54.5 kg</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"性能损耗\"><a href=\"#性能损耗\" class=\"headerlink\" title=\"性能损耗\"></a>性能损耗</h3><p><strong>在直接 new 对象并调用对象方法和访问属性时，编译器会在编译期提前检查可访问性，如果尝试进行不正确的访问，IDE会提前提示错误，例如参数传递类型不匹配，非法访问 private 属性和方法。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">而在利用反射操作对象时，编译器无法提前得知对象的类型，访问是否合法，参数传递类型是否匹配。只有在程序运行时调用反射的代码时才会从头开始检查、调用、返回结果，JVM也无法对反射的代码进行优化。</span><br></pre></td></tr></table></figure>\n\n<p>虽然反射具有性能损耗的特点，但是我们不能一概而论，产生了使用反射就会性能下降的思想，反射的慢，需要同时调用上<code>100W</code>次才可能体现出来，在几次、几十次的调用，并不能体现反射的性能低下。所以不要一味地戴有色眼镜看反射，<strong>在单次调用反射的过程中，性能损耗可以忽略不计。如果程序的性能要求很高，那么尽量不要使用反射。</strong></p>\n<h2 id=\"反射基础篇文末总结\"><a href=\"#反射基础篇文末总结\" class=\"headerlink\" title=\"反射基础篇文末总结\"></a>反射基础篇文末总结</h2><ul>\n<li>反射的思想：反射就像是<strong>一面镜子</strong>一样，在<strong>运行时</strong>才看到自己是谁，可获取到自己的信息，甚至实例化对象。</li>\n<li>反射的作用：<strong>在运行时才确定实例化对象，使程序更加健壮</strong>，面对需求变更时，可以最大程度地做到不修改程序源码应对不同的场景，实例化不同类型的对象。</li>\n<li>反射的应用场景常见的有<code>3</code>个：Spring的 IOC 容器，反射+工厂模式 使工厂类更稳定，JDBC连接数据库时加载驱动类</li>\n<li>反射的<code>3</code>个特点：增加程序的灵活性、破坏类的封装性以及性能损耗</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"反射的定义：\"><a href=\"#反射的定义：\" class=\"headerlink\" title=\"反射的定义：\"></a><strong>反射的定义：</strong></h2><p>对于任意一个实体类，都能知道它的方法和属性，对于任意一个对象，都能调用它的属性和方法。</p>\n<p><strong>正射</strong>：我们平常用的最多的 <code>new</code> 方式实例化对象的方式就是一种正射的体现。假如我需要实例化一个<code>HashMap</code>，代码就会是这样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">map.put(1, 1);</span><br></pre></td></tr></table></figure>\n\n<p>某一天发现，该段程序不适合用 HashMap 存储键值对，更倾向于用<code>LinkedHashMap</code>存储。重新编写代码后变成下面这个样子。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;Integer, Integer&gt; map &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">map.put(1, 1);</span><br></pre></td></tr></table></figure>\n\n<p>假如又有一天，发现数据还是适合用 HashMap来存储，难道又要重新修改源码吗？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发现问题了吗？我们每次改变一种需求，都要去重新修改源码，然后对代码进行编译，打包，再到 JVM 上重启项目。这么些步骤下来，效率非常低。</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/0SgNcT\"><img src=\"https://s1.ax1x.com/2020/09/24/0SgNcT.md.png\" alt=\"0SgNcT.md.png\"></a></p>\n<p>对于这种<strong>需求频繁变更但变更不大</strong>的场景，频繁地更改源码肯定是一种不允许的操作，我们可以使用一个<code>开关</code>，判断什么时候使用哪一种数据结构。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Map&lt;Integer, Integer&gt; getMap(String param) &#123;</span><br><span class=\"line\">    Map&lt;Integer, Integer&gt; map &#x3D; null;</span><br><span class=\"line\">    if (param.equals(&quot;HashMap&quot;)) &#123;</span><br><span class=\"line\">        map &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">    &#125; else if (param.equals(&quot;LinkedHashMap&quot;)) &#123;</span><br><span class=\"line\">        map &#x3D; new LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125; else if (param.equals(&quot;WeakHashMap&quot;)) &#123;</span><br><span class=\"line\">        map &#x3D; new WeakHashMap&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过传入参数<code>param</code>决定使用哪一种数据结构，可以在项目运行时，通过<strong>动态传入参数</strong>决定使用哪一个数据结构。</p>\n<p>如果某一天还想用<code>TreeMap</code>，还是避免不了修改源码，重新编译执行的弊端。这个时候，<strong>反射</strong>就派上用场了。</p>\n<p>在代码运行之前，我们<strong>不确定</strong>将来会使用哪一种数据结构，只有在程序<strong>运行时才决定</strong>使用哪一个数据类，而<code>反射</code>可以在<strong>程序运行过程</strong>中动态<strong>获取类信息</strong>和<strong>调用类方法</strong>。通过反射构造类实例，代码会演变成下面这样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;Integer, Integer&gt; <span class=\"title\">getMap</span><span class=\"params\">(String className)</span> </span>&#123;</span><br><span class=\"line\">    Class clazz = Class.forName(className);</span><br><span class=\"line\">    Consructor con = clazz.getConstructor();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Map&lt;Integer, Integer&gt;) con.newInstance();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>无论使用什么 Map，只要实现了<code>Map接口</code>，就可以使用<code>全类名路径</code>传入到方法中，获得对应的 Map 实例。例如java.util.HashMap / java.util.LinkedHashMap····如果要创建其它类例如<code>WeakHashMap</code>，我也<strong>不需要修改上面这段源码</strong>。</p>\n<p>我们来回顾一下如何从 <code>new</code> 一个对象引出使用<code>反射</code>的。</p>\n<ul>\n<li>在不使用反射时，构造对象使用 new 方式实现，这种方式在<strong>编译期</strong>就可以把对象的类型确定下来。</li>\n<li>如果需求发生变更，需要构造另一个对象，则需要修改源码，非常不优雅，所以我们通过使用<code>开关</code>，在程序运行时判断需要构造哪一个对象，在运行时可以<strong>变更开关</strong>来实例化不同的数据结构。</li>\n<li>如果还有其它扩展的类有可能被使用，就会创建出<strong>非常多的分支</strong>，且在编码时不知道有什么其他的类被使用到，假如日后<code>Map</code>接口下多了一个集合类是<code>xxxHashMap</code>，还得创建分支，此时引出了反射：可以在<code>运行时</code>才确定使用哪一个数据类，在切换类时，无需重新修改源码、编译程序。</li>\n</ul>\n<p>第一章总结：</p>\n<ul>\n<li>反射的<strong>思想</strong>：<strong>在程序运行过程中确定和解析数据类的类型。</strong></li>\n<li>反射的<strong>作用</strong>：对于在<code>编译期</code>无法确定使用哪个数据类的场景，通过<code>反射</code>可以在程序运行时<strong>构造出不同的数据类实例</strong>。</li>\n</ul>\n<h2 id=\"反射的基本使用\"><a href=\"#反射的基本使用\" class=\"headerlink\" title=\"反射的基本使用\"></a>反射的基本使用</h2><p>Java 反射的主要组成部分有4个：</p>\n<ul>\n<li><code>Class</code>：任何运行在内存中的所有类都是该 Class 类的实例对象，每个 Class 类对象内部都包含了本来的<strong>所有信息</strong>。记着一句话，通过反射干任何事，先找 Class 准没错！</li>\n<li><code>Field</code>：描述一个类的<strong>属性</strong>，内部包含了该属性的所有信息，例如<strong>数据类型，属性名，访问修饰符</strong>······</li>\n<li><code>Constructor</code>：描述一个类的<strong>构造方法</strong>，内部包含了构造方法的所有信息，例如<strong>参数类型，参数名字，访问修饰符</strong>······</li>\n<li><code>Method</code>：描述一个类的<strong>所有方法</strong>（包括抽象方法），内部包含了该方法的所有信息，与<code>Constructor</code>类似，不同之处是 Method 拥有<strong>返回值类型</strong>信息，因为构造方法是没有返回值的。</li>\n</ul>\n<p>如果用到了反射，离不开这核心的<code>4</code>个类，只有去了解它们内部提供了哪些信息，有什么作用，运用它们的时候才能<strong>易如反掌</strong>。</p>\n<p><img src=\"https://s1.ax1x.com/2020/09/24/0ShXAe.jpg\" alt=\"0ShXAe.jpg\"></p>\n<p>在学习反射的基本使用时，我会用一个<code>SmallPineapple</code>类作为模板进行说明，首先我们先来熟悉这个类的基本组成：<strong>属性，构造函数和方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SmallPineapple &#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public int age;</span><br><span class=\"line\">    private double weight; &#x2F;&#x2F; 体重只有自己知道</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SmallPineapple() &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SmallPineapple(String name, int age) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.age &#x3D; age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void getInfo() &#123;</span><br><span class=\"line\">        System.out.print(&quot;[&quot;+ name + &quot; 的年龄是：&quot; + age + &quot;]&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>反射中的用法有非常非常多，常见的功能有以下这几个：</p>\n<ul>\n<li>在运行时获取一个类的 <strong>Class 对象</strong></li>\n<li>在运行时构造一个类的<strong>实例化对象</strong></li>\n<li>在运行时获取一个类的所有信息：<strong>变量、方法、构造器、注解</strong></li>\n</ul>\n<h3 id=\"获取类的-Class-对象\"><a href=\"#获取类的-Class-对象\" class=\"headerlink\" title=\"获取类的 Class 对象\"></a>获取类的 Class 对象</h3><p>在 Java 中，每一个类都会有专属于自己的 Class 对象，当我们编写完<code>.java</code>文件后，使用<code>javac</code>编译后，就会产生一个字节码文件<code>.class</code>，在字节码文件中包含类的所有信息，如<code>属性</code>，<code>构造方法</code>，<code>方法</code>······当字节码文件被装载进虚拟机执行时，会在内存中生成 Class 对象，它包含了该类内部的所有信息，在程序运行时可以获取这些信息。</p>\n<p>获取 Class 对象的方法有<code>3</code>种：</p>\n<ul>\n<li><code>类名.class</code>：这种获取方式只有在<code>编译</code>前已经声明了该类的类型才能获取到 Class 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; SmallPineapple.class;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>实例.getClass()</code>：通过实例化对象获取该实例的 Class 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SmallPineapple sp &#x3D; new SmallPineapple();</span><br><span class=\"line\">Class clazz &#x3D; sp.getClass();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>Class.forName(className)</code>：通过类的<strong>全限定名</strong>获取该类的 Class 对象</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.smallpineapple&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>拿到 <code>Class</code>对象就可以对它为所欲为了：剥开它的皮（获取<strong>类信息</strong>）、指挥它做事（调用它的<strong>方法</strong>），看透它的一切（获取<strong>属性</strong>），总之它就没有隐私了。</p>\n<p>不过在程序中，每个类的 Class 对象只有一个，也就是说你只有这一个<code>奴隶</code>。我们用上面三种方式测试，通过三种方式打印各个 <code>Class</code> 对象都是相同的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz1 &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">Class clazz2 &#x3D; SmallPineapple.class;</span><br><span class=\"line\">SmallPineapple instance &#x3D; new SmallPineapple();</span><br><span class=\"line\">Class clazz3 &#x3D; instance.getClass();</span><br><span class=\"line\">System.out.println(&quot;Class.forName() &#x3D;&#x3D; SmallPineapple.class:&quot; + (clazz1 &#x3D;&#x3D; clazz2));</span><br><span class=\"line\">System.out.println(&quot;Class.forName() &#x3D;&#x3D; instance.getClass():&quot; + (clazz1 &#x3D;&#x3D; clazz3));</span><br><span class=\"line\">System.out.println(&quot;instance.getClass() &#x3D;&#x3D; SmallPineapple.class:&quot; + (clazz2 &#x3D;&#x3D; clazz3));</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgchr.com/i/0S4H8s\"><img src=\"https://s1.ax1x.com/2020/09/24/0S4H8s.jpg\" alt=\"0S4H8s.jpg\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内存中只有一个 Class 对象的原因要牵扯到 JVM 类加载机制的双亲委派模型，它保证了程序运行时，加载类时每个类在内存中仅会产生一个Class对象。在这里我不打算详细展开说明，可以简单地理解为 JVM 帮我们保证了一个类在内存中至多存在一个 Class 对象。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造类的实例化对象\"><a href=\"#构造类的实例化对象\" class=\"headerlink\" title=\"构造类的实例化对象\"></a>构造类的实例化对象</h3><p>通过反射构造一个类的实例方式有<code>2</code>种：</p>\n<ul>\n<li><p>Class 对象调用<code>newInstance()</code>方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">SmallPineapple smallPineapple &#x3D; (SmallPineapple) clazz.newInstance();</span><br><span class=\"line\">smallPineapple.getInfo();</span><br><span class=\"line\">&#x2F;&#x2F; [null 的年龄是：0]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>即使 SmallPineapple 已经显式定义了构造方法，通过 newInstance()  创建的实例中，所有属性值都是对应类型的<code>初始值</code>，因为 newInstance() 构造实例会<strong>调用默认无参构造器</strong>。</p>\n<ul>\n<li>Constructor 构造器调用<code>newInstance()</code>方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz = Class.forName(<span class=\"string\">&quot;com.bean.SmallPineapple&quot;</span>);</span><br><span class=\"line\">Constructor constructor = clazz.getConstructor(String.class, <span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">SmallPineapple smallPineapple2 = (SmallPineapple) constructor.newInstance(<span class=\"string\">&quot;小菠萝&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">smallPineapple2.getInfo();</span><br><span class=\"line\"><span class=\"comment\">// [小菠萝 的年龄是：21]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 getConstructor(Object… paramTypes) 方法指定获取<strong>指定参数类型</strong>的 Constructor， Constructor 调用 newInstance(Object… paramValues) 时传入构造方法参数的值，同样可以构造一个实例，且内部属性已经被赋值。</p>\n<p>通过<code>Class</code>对象调用 newInstance() 会走<strong>默认无参构造方法</strong>，如果想通过<strong>显式构造方法</strong>构造实例，需要提前从Class中调用<code>getConstructor()</code>方法获取对应的构造器，通过构造器去实例化对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这些 API 是在开发当中最常遇到的，当然还有非常多重载的方法，本文由于篇幅原因，且如果每个方法都一一讲解，我们也记不住，所以用到的时候去类里面查找就已经足够了。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取一个类的所有信息\"><a href=\"#获取一个类的所有信息\" class=\"headerlink\" title=\"获取一个类的所有信息\"></a>获取一个类的所有信息</h3><p><strong>Class 对象中包含了该类的所有信息，在编译期我们能看到的信息就是该类的变量、方法、构造器，在运行时最常被获取的也是这些信息。</strong></p>\n</li>\n</ul>\n<p><a href=\"https://imgchr.com/i/0S78pQ\"><img src=\"https://s1.ax1x.com/2020/09/24/0S78pQ.jpg\" alt=\"0S78pQ.jpg\"></a></p>\n<h3 id=\"获取类中的变量（Field）\"><a href=\"#获取类中的变量（Field）\" class=\"headerlink\" title=\"获取类中的变量（Field）\"></a>获取类中的变量（Field）</h3><ul>\n<li>Field[] getFields()：获取类中所有被<code>public</code>修饰的所有变量</li>\n<li>Field getField(String name)：根据<strong>变量名</strong>获取类中的一个变量，该<strong>变量必须被public修饰</strong></li>\n<li>Field[] getDeclaredFields()：获取类中所有的变量，但<strong>无法获取继承下来的变量</strong></li>\n<li>Field getDeclaredField(String name)：根据姓名获取类中的某个变量，<strong>无法获取继承下来的变量</strong></li>\n</ul>\n<h3 id=\"获取类中的方法（Method）\"><a href=\"#获取类中的方法（Method）\" class=\"headerlink\" title=\"获取类中的方法（Method）\"></a>获取类中的方法（Method）</h3><ul>\n<li>Method[] getMethods()：获取类中被<code>public</code>修饰的所有方法</li>\n<li>Method getMethod(String name, Class…&lt;?&gt; paramTypes)：根据<strong>名字和参数类型</strong>获取对应方法，该方法必须被<code>public</code>修饰</li>\n<li>Method[] getDeclaredMethods()：获取<code>所有</code>方法，但<strong>无法获取继承下来的方法</strong></li>\n<li>Method getDeclaredMethod(String name, Class…&lt;?&gt; paramTypes)：根据<strong>名字和参数类型</strong>获取对应方法，<strong>无法获取继承下来的方法</strong></li>\n</ul>\n<h3 id=\"获取类的构造器（Constructor）\"><a href=\"#获取类的构造器（Constructor）\" class=\"headerlink\" title=\"获取类的构造器（Constructor）\"></a>获取类的构造器（Constructor）</h3><ul>\n<li>Constuctor[] getConstructors()：获取类中所有被<code>public</code>修饰的构造器</li>\n<li>Constructor getConstructor(Class…&lt;?&gt; paramTypes)：根据<code>参数类型</code>获取类中某个构造器，该构造器必须被<code>public</code>修饰</li>\n<li>Constructor[] getDeclaredConstructors()：获取类中所有构造器</li>\n<li>Constructor getDeclaredConstructor(class…&lt;?&gt; paramTypes)：根据<code>参数类型</code>获取对应的构造器</li>\n</ul>\n<p>每种功能内部以 Declared 细分为<code>2</code>类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有Declared修饰的方法：可以获取该类内部包含的所有变量、方法和构造器，但是无法获取继承下来的信息</span><br><span class=\"line\"></span><br><span class=\"line\">无Declared修饰的方法：可以获取该类中public修饰的变量、方法和构造器，可获取继承下来的信息</span><br></pre></td></tr></table></figure>\n\n<p>如果想获取类中<strong>所有的（包括继承）</strong>变量、方法和构造器，则需要同时调用<code>getXXXs()</code>和<code>getDeclaredXXXs()</code>两个方法，用<code>Set</code>集合存储它们获得的变量、构造器和方法，以防两个方法获取到相同的东西。</p>\n<p>例如：要获取SmallPineapple获取类中<strong>所有的变量</strong>，代码应该是下面这样写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">&#x2F;&#x2F; 获取 public 属性，包括继承</span><br><span class=\"line\">Field[] fields1 &#x3D; clazz.getFields();</span><br><span class=\"line\">&#x2F;&#x2F; 获取所有属性，不包括继承</span><br><span class=\"line\">Field[] fields2 &#x3D; clazz.getDeclaredFields();</span><br><span class=\"line\">&#x2F;&#x2F; 将所有属性汇总到 set</span><br><span class=\"line\">Set&lt;Field&gt; allFields &#x3D; new HashSet&lt;&gt;();</span><br><span class=\"line\">allFields.addAll(Arrays.asList(fields1));</span><br><span class=\"line\">allFields.addAll(Arrays.asList(fields2));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不知道你有没有发现一件有趣的事情，如果父类的属性用protected修饰，利用反射是无法获取到的。</span><br><span class=\"line\">protected 修饰符的作用范围：只允许同一个包下或者子类访问，可以继承到子类。</span><br><span class=\"line\">getFields() 只能获取到本类的public属性的变量值；</span><br><span class=\"line\">getDeclaredFields() 只能获取到本类的所有属性，不包括继承的；无论如何都获取不到父类的 protected 属性修饰的变量，但是它的的确确存在于子类中。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取注解\"><a href=\"#获取注解\" class=\"headerlink\" title=\"获取注解\"></a>获取注解</h3><p><strong>获取注解单独拧了出来，因为它并不是专属于 Class 对象的一种信息，每个变量，方法和构造器都可以被注解修饰，所以在反射中，Field，Constructor 和 Method 类对象都可以调用下面这些方法获取标注在它们之上的注解。</strong></p>\n<ul>\n<li>Annotation[] getAnnotations()：获取该对象上的<strong>所有注解</strong></li>\n<li>Annotation getAnnotation(Class annotaionClass)：传入<code>注解类型</code>，获取该对象上的特定一个注解</li>\n<li>Annotation[] getDeclaredAnnotations()：获取该对象上的显式标注的所有注解，无法获取<code>继承</code>下来的注解</li>\n<li>Annotation getDeclaredAnnotation(Class annotationClass)：根据<code>注解类型</code>，获取该对象上的特定一个注解，无法获取<code>继承</code>下来的注解</li>\n</ul>\n<p>只有注解的<code>@Retension</code>标注为<code>RUNTIME</code>时，才能够通过反射获取到该注解，@Retension 有<code>3</code>种保存策略：</p>\n<ul>\n<li><code>SOURCE</code>：只在<strong>源文件(.java)**中保存，即该注解只会保留在源文件中，</strong>编译时编译器会忽略该注解**，例如 @Override 注解</li>\n<li><code>CLASS</code>：保存在<strong>字节码文件(.class)**中，注解会随着编译跟随字节码文件中，但是</strong>运行时**不会对该注解进行解析</li>\n<li><code>RUNTIME</code>：一直保存到<strong>运行时</strong>，<strong>用得最多的一种保存策略</strong>，在运行时可以获取到该注解的所有信息</li>\n</ul>\n<p>像下面这个例子，SmallPineapple 类继承了抽象类<code>Pineapple</code>，<code>getInfo()</code>方法上标识有 @Override 注解，且在子类中标注了<code>@Transient</code>注解，在运行时获取子类重写方法上的所有注解，只能获取到<code>@Transient</code>的信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class Pineapple &#123;</span><br><span class=\"line\">    public abstract void getInfo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class SmallPineapple extends Pineapple &#123;</span><br><span class=\"line\">    @Transient</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void getInfo() &#123;</span><br><span class=\"line\">        System.out.print(&quot;小菠萝的身高和年龄是:&quot; + height + &quot;cm ; &quot; + age + &quot;岁&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动类<code>Bootstrap</code>获取 SmallPineapple 类中的 getInfo() 方法上的注解信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Bootstrap &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 根据运行时传入的全类名路径判断具体的类对象</span><br><span class=\"line\">     * @param path 类的全类名路径</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static void execute(String path) throws Exception &#123;</span><br><span class=\"line\">        Class obj &#x3D; Class.forName(path);</span><br><span class=\"line\">        Method method &#x3D; obj.getMethod(&quot;getInfo&quot;);</span><br><span class=\"line\">        Annotation[] annotations &#x3D; method.getAnnotations();</span><br><span class=\"line\">        for (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">            System.out.println(annotation.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        execute(&quot;com.pineapple.SmallPineapple&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; @java.beans.Transient(value&#x3D;true)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射调用方法\"><a href=\"#通过反射调用方法\" class=\"headerlink\" title=\"通过反射调用方法\"></a>通过反射调用方法</h3><p>通过反射获取到某个 Method 类对象后，可以通过调用<code>invoke</code>方法执行。</p>\n<ul>\n<li><code>invoke(Oject obj, Object... args)</code>：参数``1<code>指定调用该方法的**对象**，参数</code>2`是方法的参数列表值。</li>\n</ul>\n<p>如果调用的方法是<strong>静态方法</strong>，参数1只需要传入<code>null</code>，因为静态方法不与某个对象有关，只与某个类有关。</p>\n<p>可以像下面这种做法，通过反射实例化一个对象，然后获取<code>Method</code>方法对象，调用<code>invoke()</code>指定<code>SmallPineapple</code>的<code>getInfo()</code>方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class clazz &#x3D; Class.forName(&quot;com.bean.SmallPineapple&quot;);</span><br><span class=\"line\">Constructor constructor &#x3D; clazz.getConstructor(String.class, int.class);</span><br><span class=\"line\">constructor.setAccessible(true);</span><br><span class=\"line\">SmallPineapple sp &#x3D; (SmallPineapple) constructor.newInstance(&quot;小菠萝&quot;, 21);</span><br><span class=\"line\">Method method &#x3D; clazz.getMethod(&quot;getInfo&quot;);</span><br><span class=\"line\">if (method !&#x3D; null) &#123;</span><br><span class=\"line\">    method.invoke(sp, null);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F; [小菠萝的年龄是：21]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反射的应用场景\"><a href=\"#反射的应用场景\" class=\"headerlink\" title=\"反射的应用场景\"></a>反射的应用场景</h2><p>反射常见的应用场景这里介绍<code>3</code>个：</p>\n<ul>\n<li>Spring 实例化对象：当程序启动时，Spring 会读取配置文件<code>applicationContext.xml</code>并解析出里面所有的  标签实例化到<code>IOC</code>容器中。</li>\n<li>反射 + 工厂模式：通过<code>反射</code>消除工厂中的多个分支，如果需要生产新的类，无需关注工厂类，工厂类可以应对各种新增的类，<code>反射</code>可以使得程序更加健壮。</li>\n<li>JDBC连接数据库：使用JDBC连接数据库时，指定连接数据库的<code>驱动类</code>时用到反射加载驱动类</li>\n</ul>\n<h3 id=\"Spring-的-IOC-容器\"><a href=\"#Spring-的-IOC-容器\" class=\"headerlink\" title=\"Spring 的 IOC 容器\"></a>Spring 的 IOC 容器</h3><p>在 Spring 中，经常会编写一个上下文配置文件<code>applicationContext.xml</code>，里面就是关于<code>bean</code>的配置，程序启动时会读取该 xml 文件，解析出所有的 <code>&lt;bean&gt;</code>标签，并实例化对象放入<code>IOC</code>容器中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class=\"line\">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class=\"line\">    &lt;bean id&#x3D;&quot;smallpineapple&quot; class&#x3D;&quot;com.bean.SmallPineapple&quot;&gt;</span><br><span class=\"line\">        &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot;小菠萝&quot;&#x2F;&gt;</span><br><span class=\"line\">        &lt;constructor-arg type&#x3D;&quot;int&quot; value&#x3D;&quot;21&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;bean&gt;</span><br><span class=\"line\">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在定义好上面的文件后，通过<code>ClassPathXmlApplicationContext</code>加载该配置文件，程序启动时，Spring 会将该配置文件中的所有<code>bean</code>都实例化，放入 IOC 容器中，IOC 容器本质上就是一个工厂，通过该工厂传入 \\ 标签的<code>id</code>属性获取到对应的实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        SmallPineapple smallPineapple = (SmallPineapple) ac.getBean(<span class=\"string\">&quot;smallpineapple&quot;</span>);</span><br><span class=\"line\">        smallPineapple.getInfo(); <span class=\"comment\">// [小菠萝的年龄是：21]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring 在实例化对象的过程经过简化之后，可以理解为反射实例化对象的步骤：</p>\n<ul>\n<li><strong>获取Class对象的构造器</strong></li>\n<li>通过构造器<strong>调用 newInstance()</strong> 实例化对象</li>\n</ul>\n<p>当然 Spring 在实例化对象时，做了非常多额外的操作，才能够让现在的开发足够的<strong>便捷且稳定</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在之后的文章中会专门写一篇文章讲解如何利用反射实现一个简易版的IOC容器，IOC容器原理很简单，只要掌握了反射的思想，了解反射的常用 API 就可以实现，我可以提供一个简单的思路：利用 HashMap 存储所有实例，key 代表 \\ 标签的 id，value 存储对应的实例，这对应了 Spring IOC容器管理的对象默认是单例的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"反射-抽象工厂模式\"><a href=\"#反射-抽象工厂模式\" class=\"headerlink\" title=\"反射 + 抽象工厂模式\"></a>反射 + 抽象工厂模式</h3><p>传统的工厂模式，如果需要生产新的子类，<strong>需要修改工厂类，在工厂类中增加新的分支</strong>；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MapFactory &#123;</span><br><span class=\"line\">    public Map&lt;Object, object&gt; produceMap(String name) &#123;</span><br><span class=\"line\">        if (&quot;HashMap&quot;.equals(name)) &#123;</span><br><span class=\"line\">            return new HashMap&lt;&gt;();</span><br><span class=\"line\">        &#125; else if (&quot;TreeMap&quot;.equals(name)) &#123;</span><br><span class=\"line\">            return new TreeMap&lt;&gt;();</span><br><span class=\"line\">        &#125; &#x2F;&#x2F; ···</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用反射和工厂模式相结合，在产生新的子类时，<strong>工厂类不用修改任何东西</strong>，可以专注于子类的实现，<strong>当子类确定下来时，工厂也就可以生产该子类了。</strong></p>\n<p>反射 + 抽象工厂的<strong>核心思想</strong>是：</p>\n<ul>\n<li><strong>在运行时通过参数传入不同子类的全限定名获取到不同的 Class 对象，调用 newInstance() 方法返回不同的子类。</strong>细心的读者会发现提到了<strong>子类</strong>这个概念，所以反射 + 抽象工厂模式，一般会用于有<strong>继承</strong>或者<strong>接口实现</strong>关系。</li>\n</ul>\n<p>例如，在运行时才确定使用哪一种 <code>Map</code> 结构，我们可以利用反射传入某个具体 Map 的全限定名，实例化一个特定的子类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MapFactory &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * @param className 类的全限定名</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public Map&lt;Object, Object&gt; produceMap(String className) &#123;</span><br><span class=\"line\">        Class clazz &#x3D; Class.forName(className);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; map &#x3D; clazz.newInstance();</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>className</code> 可以指定为 java.util.HashMap，或者 java.util.TreeMap 等等，根据业务场景来定。</p>\n<h3 id=\"JDBC-加载数据库驱动类\"><a href=\"#JDBC-加载数据库驱动类\" class=\"headerlink\" title=\"JDBC 加载数据库驱动类\"></a>JDBC 加载数据库驱动类</h3><p>在导入第三方库时，JVM不会主动去加载外部导入的类，而是<strong>等到真正使用时，才去加载需要的类</strong>，正是如此，我们可以在获取数据库连接时传入驱动类的全限定名，交给 JVM 加载该类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DBConnectionUtil &#123;</span><br><span class=\"line\">    &#x2F;** 指定数据库的驱动类 *&#x2F;</span><br><span class=\"line\">    private static final String DRIVER_CLASS_NAME &#x3D; &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static Connection getConnection() &#123;</span><br><span class=\"line\">        Connection conn &#x3D; null;</span><br><span class=\"line\">        &#x2F;&#x2F; 加载驱动类</span><br><span class=\"line\">        Class.forName(DRIVER_CLASS_NAME);</span><br><span class=\"line\">        &#x2F;&#x2F; 获取数据库连接对象</span><br><span class=\"line\">        conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;···&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class=\"line\">        return conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在我们开发 SpringBoot 项目时，会经常遇到这个类，但是可能习惯成自然了，就没多大在乎，我在这里给你们看看常见的<code>application.yml</code>中的数据库配置，我想你应该会恍然大悟吧。</p>\n<p><a href=\"https://imgchr.com/i/0SHrUf\"><img src=\"https://s1.ax1x.com/2020/09/24/0SHrUf.jpg\" alt=\"0SHrUf.jpg\"></a></p>\n<p>这里的 <strong>driver-class-name</strong>，和我们一开始加载的类是不是觉得很相似，这是因为<strong>MySQL</strong>版本不同引起的<strong>驱动类不同</strong>，这体现使用反射的好处：不需要修改源码，<strong>仅加载配置文件就可以完成驱动类的替换</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在之后的文章中会专门写一篇文章详细地介绍反射的应用场景，实现简单的IOC容器以及通过反射实现工厂模式的好处。</span><br><span class=\"line\">在这里，你只需要掌握反射的基本用法和它的思想，了解它的主要使用场景</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反射的优势及缺陷\"><a href=\"#反射的优势及缺陷\" class=\"headerlink\" title=\"反射的优势及缺陷\"></a>反射的优势及缺陷</h2><p>反射的<strong>优点</strong>：</p>\n<ul>\n<li><strong>增加程序的灵活性</strong>：面对需求变更时，可以灵活地实例化不同对象</li>\n</ul>\n<p>但是，有得必有失，一项技术不可能只有优点没有缺点，反射也有<strong>两个比较隐晦的缺点</strong>：</p>\n<ul>\n<li><strong>破坏类的封装性</strong>：可以强制访问 private 修饰的信息</li>\n<li><strong>性能损耗</strong>：反射相比直接实例化对象、调用方法、访问变量，中间需要非常多的<strong>检查步骤和解析步骤</strong>，JVM无法对它们优化。</li>\n</ul>\n<h3 id=\"增加程序的灵活性\"><a href=\"#增加程序的灵活性\" class=\"headerlink\" title=\"增加程序的灵活性\"></a>增加程序的灵活性</h3><p>这里不再用 SmallPineapple 举例了，我们来看一个更加<code>贴近开发</code>的例子：</p>\n<ul>\n<li>利用反射连接数据库，<strong>涉及到数据库的数据源</strong>。在 SpringBoot 中一切约定大于配置，想要<strong>定制配置</strong>时，使用<code>application.properties</code>配置文件指定数据源</li>\n</ul>\n<p><strong>角色1 - Java的设计者</strong>：我们设计好<code>DataSource</code>接口，你们其它数据库厂商想要开发者用<code>你们的数据源</code>监控数据库，就得实现<code>我的这个接口</code>！</p>\n<p><strong>角色2 - 数据库厂商</strong>：</p>\n<ul>\n<li>MySQL 数据库厂商：我们提供了 <strong>com.mysql.cj.jdbc.MysqlDataSource</strong> 数据源，开发者可以使用它连接 MySQL。</li>\n<li>阿里巴巴厂商：我们提供了 <strong>com.alibaba.druid.pool.DruidDataSource</strong> 数据源，我这个数据源更牛逼，具有<strong>页面监控</strong>，<strong>慢SQL日志记录</strong>等功能，开发者快来用它监控 MySQL吧！</li>\n<li>SQLServer 厂商：我们提供了 <strong>com.microsoft.sqlserver.jdbc.SQLServerDataSource</strong> 数据源，如果你想实用SQL Server 作为数据库，那就使用我们的这个数据源连接吧</li>\n</ul>\n<p><strong>角色3 - 开发者</strong>：我们可以用<code>配置文件</code>指定使用<code>DruidDataSource</code>数据源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure>\n\n<p><strong>需求变更</strong>：某一天，老板来跟我们说，Druid 数据源不太符合我们现在的项目了，我们使用 <strong>MysqlDataSource</strong> 吧，然后程序猿就会修改配置文件，重新加载配置文件，并重启项目，完成数据源的切换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.datasource.type&#x3D;com.mysql.cj.jdbc.MysqlDataSource</span><br></pre></td></tr></table></figure>\n\n<p>在改变连接数据库的数据源时，只需要改变配置文件即可，<strong>无需改变任何代码</strong>，原因是：</p>\n<ul>\n<li><strong>Spring Boot 底层封装好了连接数据库的数据源配置，利用反射，适配各个数据源。</strong></li>\n</ul>\n<p>下面来简略的进行源码分析。我们用<code>ctrl+左键</code>点击<code>spring.datasource.type</code>进入 DataSourceProperties 类中，发现使用setType() 将<strong>全类名转化为 Class 对象</strong>注入到<code>type</code>成员变量当中。在连接并监控数据库时，就会使用指定的数据源操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Class&lt;? extends DataSource&gt; type;</span><br><span class=\"line\"></span><br><span class=\"line\">public void setType(Class&lt;? extends DataSource&gt; type) &#123;</span><br><span class=\"line\">    this.type &#x3D; type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Class</code>对象指定了泛型上界<code>DataSource</code>，我们去看一下各大数据源的<code>类图结构</code>。</p>\n<p><a href=\"https://imgchr.com/i/0SbEqI\"><img src=\"https://s1.ax1x.com/2020/09/24/0SbEqI.jpg\" alt=\"0SbEqI.jpg\"></a></p>\n<p><strong>上图展示了一部分数据源，当然不止这些，但是我们可以看到，无论指定使用哪一种数据源，我们都只需要与配置文件打交道，而无需更改源码，这就是反射的灵活性！</strong></p>\n<h3 id=\"破坏类的封装性\"><a href=\"#破坏类的封装性\" class=\"headerlink\" title=\"破坏类的封装性\"></a>破坏类的封装性</h3><p>很明显的一个特点，反射可以获取类中被<code>private</code>修饰的变量、方法和构造器，这<strong>违反了面向对象的封装特性</strong>，因为被 private 修饰意味着不想对外暴露，只允许本类访问，而<code>setAccessable(true)</code>可以无视访问修饰符的限制，外界可以强制访问。</p>\n<p>还记得<code>单例模式</code>一文吗？里面讲到反射破坏饿汉式和懒汉式单例模式，所以之后用了<code>枚举</code>避免被反射KO。</p>\n<p>回到最初的起点，SmallPineapple 里有一个 weight 属性被 private 修饰符修饰，目的在于自己的体重并不想给外界知道。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SmallPineapple &#123;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public int age;</span><br><span class=\"line\">    private double weight; &#x2F;&#x2F; 体重只有自己知道</span><br><span class=\"line\">    </span><br><span class=\"line\">    public SmallPineapple(String name, int age, double weight) &#123;</span><br><span class=\"line\">        this.name &#x3D; name;</span><br><span class=\"line\">        this.age &#x3D; age;</span><br><span class=\"line\">        this.weight &#x3D; weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然 weight 属性理论上只有自己知道，但是如果经过反射，这个类就像在<strong>裸奔</strong>一样，在反射面前变得<code>一览无遗</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SmallPineapple sp &#x3D; new SmallPineapple(&quot;小菠萝&quot;, 21, &quot;54.5&quot;);</span><br><span class=\"line\">Clazz clazz &#x3D; Class.forName(sp.getClass());</span><br><span class=\"line\">Field weight &#x3D; clazz.getDeclaredField(&quot;weight&quot;);</span><br><span class=\"line\">weight.setAccessable(true);</span><br><span class=\"line\">System.out.println(&quot;窥觑到小菠萝的体重是：&quot; + weight.get(sp));</span><br><span class=\"line\">&#x2F;&#x2F; 窥觑到小菠萝的体重是：54.5 kg</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"性能损耗\"><a href=\"#性能损耗\" class=\"headerlink\" title=\"性能损耗\"></a>性能损耗</h3><p><strong>在直接 new 对象并调用对象方法和访问属性时，编译器会在编译期提前检查可访问性，如果尝试进行不正确的访问，IDE会提前提示错误，例如参数传递类型不匹配，非法访问 private 属性和方法。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">而在利用反射操作对象时，编译器无法提前得知对象的类型，访问是否合法，参数传递类型是否匹配。只有在程序运行时调用反射的代码时才会从头开始检查、调用、返回结果，JVM也无法对反射的代码进行优化。</span><br></pre></td></tr></table></figure>\n\n<p>虽然反射具有性能损耗的特点，但是我们不能一概而论，产生了使用反射就会性能下降的思想，反射的慢，需要同时调用上<code>100W</code>次才可能体现出来，在几次、几十次的调用，并不能体现反射的性能低下。所以不要一味地戴有色眼镜看反射，<strong>在单次调用反射的过程中，性能损耗可以忽略不计。如果程序的性能要求很高，那么尽量不要使用反射。</strong></p>\n<h2 id=\"反射基础篇文末总结\"><a href=\"#反射基础篇文末总结\" class=\"headerlink\" title=\"反射基础篇文末总结\"></a>反射基础篇文末总结</h2><ul>\n<li>反射的思想：反射就像是<strong>一面镜子</strong>一样，在<strong>运行时</strong>才看到自己是谁，可获取到自己的信息，甚至实例化对象。</li>\n<li>反射的作用：<strong>在运行时才确定实例化对象，使程序更加健壮</strong>，面对需求变更时，可以最大程度地做到不修改程序源码应对不同的场景，实例化不同类型的对象。</li>\n<li>反射的应用场景常见的有<code>3</code>个：Spring的 IOC 容器，反射+工厂模式 使工厂类更稳定，JDBC连接数据库时加载驱动类</li>\n<li>反射的<code>3</code>个特点：增加程序的灵活性、破坏类的封装性以及性能损耗</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[{"name":"我的第一篇博客~","_id":"ckewf8obk00024n34gu6x9t5c"}]}}